apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: full-pipeline
  annotations:
    tekton.dev/output_artifacts: '{"f1": [{"key": "artifacts/$PIPELINERUN/f1/Output.tgz",
      "name": "f1-Output", "path": "/tmp/outputs/Output/data"}], "f2": [{"key": "artifacts/$PIPELINERUN/f2/Output.tgz",
      "name": "f2-Output", "path": "/tmp/outputs/Output/data"}], "g": [{"key": "artifacts/$PIPELINERUN/g/Output.tgz",
      "name": "g-Output", "path": "/tmp/outputs/Output/data"}], "gen-data": [{"key":
      "artifacts/$PIPELINERUN/gen-data/Output.tgz", "name": "gen-data-Output", "path":
      "/tmp/outputs/Output/data"}]}'
    tekton.dev/input_artifacts: '{"f1": [{"name": "gen-data-Output", "parent_task":
      "gen-data"}], "f2": [{"name": "gen-data-Output", "parent_task": "gen-data"}],
      "g": [{"name": "f1-Output", "parent_task": "f1"}, {"name": "f2-Output", "parent_task":
      "f2"}]}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"f1": [["Output", "$(results.output.path)"]], "f2":
      [["Output", "$(results.output.path)"]], "g": [["Output", "$(results.output.path)"]],
      "gen-data": [["Output", "$(results.output.path)"]]}'
    sidecar.istio.io/inject: "false"
    pipelines.kubeflow.org/pipeline_spec: '{"name": "Full pipeline"}'
spec:
  pipelineSpec:
    tasks:
    - name: gen-data
      taskSpec:
        steps:
        - name: main
          args: ['----output-paths', $(results.output.path)]
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            echo -n "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def gen_data():
                import numpy as np

                return np.random.uniform()

            def _serialize_float(float_value: float) -> str:
                if isinstance(float_value, str):
                    return float_value
                if not isinstance(float_value, (float, int)):
                    raise TypeError('Value "{}" has type "{}" instead of float.'.format(str(float_value), str(type(float_value))))
                return str(float_value)

            import argparse
            _parser = argparse.ArgumentParser(prog='Gen data', description='')
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = gen_data(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_float,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
        results:
        - {name: output, description: /tmp/outputs/Output/data}
        metadata:
          annotations: {pipelines.kubeflow.org/component_spec: '{"implementation":
              {"container": {"args": ["----output-paths", {"outputPath": "Output"}],
              "command": ["sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\" > \"$program_path\"\npython3
              -u \"$program_path\" \"$@\"\n", "def gen_data():\n    import numpy as
              np\n\n    return np.random.uniform()\n\ndef _serialize_float(float_value:
              float) -> str:\n    if isinstance(float_value, str):\n        return
              float_value\n    if not isinstance(float_value, (float, int)):\n        raise
              TypeError(''Value \"{}\" has type \"{}\" instead of float.''.format(str(float_value),
              str(type(float_value))))\n    return str(float_value)\n\nimport argparse\n_parser
              = argparse.ArgumentParser(prog=''Gen data'', description='''')\n_parser.add_argument(\"----output-paths\",
              dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
              = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = gen_data(**_parsed_args)\n\n_outputs
              = [_outputs]\n\n_output_serializers = [\n    _serialize_float,\n\n]\n\nimport
              os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
              OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
              "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}},
              "name": "Gen data", "outputs": [{"name": "Output", "type": "Float"}]}'}
      timeout: 0s
    - name: f1
      params:
      - {name: gen-data-Output, value: $(tasks.gen-data.results.output)}
      taskSpec:
        steps:
        - name: main
          args: [--x, $(inputs.params.gen-data-Output), '----output-paths', $(results.output.path)]
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            echo -n "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def f1(x):
                return x**2

            def _serialize_float(float_value: float) -> str:
                if isinstance(float_value, str):
                    return float_value
                if not isinstance(float_value, (float, int)):
                    raise TypeError('Value "{}" has type "{}" instead of float.'.format(str(float_value), str(type(float_value))))
                return str(float_value)

            import argparse
            _parser = argparse.ArgumentParser(prog='F1', description='')
            _parser.add_argument("--x", dest="x", type=float, required=True, default=argparse.SUPPRESS)
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = f1(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_float,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
        params:
        - {name: gen-data-Output}
        results:
        - {name: output, description: /tmp/outputs/Output/data}
        metadata:
          annotations: {pipelines.kubeflow.org/component_spec: '{"implementation":
              {"container": {"args": ["--x", {"inputValue": "x"}, "----output-paths",
              {"outputPath": "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\necho
              -n \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def f1(x):\n    return x**2\n\ndef _serialize_float(float_value: float)
              -> str:\n    if isinstance(float_value, str):\n        return float_value\n    if
              not isinstance(float_value, (float, int)):\n        raise TypeError(''Value
              \"{}\" has type \"{}\" instead of float.''.format(str(float_value),
              str(type(float_value))))\n    return str(float_value)\n\nimport argparse\n_parser
              = argparse.ArgumentParser(prog=''F1'', description='''')\n_parser.add_argument(\"--x\",
              dest=\"x\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
              dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
              = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = f1(**_parsed_args)\n\n_outputs
              = [_outputs]\n\n_output_serializers = [\n    _serialize_float,\n\n]\n\nimport
              os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
              OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
              "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}},
              "inputs": [{"name": "x", "type": "Float"}], "name": "F1", "outputs":
              [{"name": "Output", "type": "Float"}]}'}
      timeout: 0s
    - name: f2
      params:
      - {name: gen-data-Output, value: $(tasks.gen-data.results.output)}
      taskSpec:
        steps:
        - name: main
          args: [--x, $(inputs.params.gen-data-Output), '----output-paths', $(results.output.path)]
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            echo -n "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def f2(x):
                import numpy as np

                return np.exp(x)

            def _serialize_float(float_value: float) -> str:
                if isinstance(float_value, str):
                    return float_value
                if not isinstance(float_value, (float, int)):
                    raise TypeError('Value "{}" has type "{}" instead of float.'.format(str(float_value), str(type(float_value))))
                return str(float_value)

            import argparse
            _parser = argparse.ArgumentParser(prog='F2', description='')
            _parser.add_argument("--x", dest="x", type=float, required=True, default=argparse.SUPPRESS)
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = f2(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_float,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
        params:
        - {name: gen-data-Output}
        results:
        - {name: output, description: /tmp/outputs/Output/data}
        metadata:
          annotations: {pipelines.kubeflow.org/component_spec: '{"implementation":
              {"container": {"args": ["--x", {"inputValue": "x"}, "----output-paths",
              {"outputPath": "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\necho
              -n \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def f2(x):\n    import numpy as np\n\n    return np.exp(x)\n\ndef _serialize_float(float_value:
              float) -> str:\n    if isinstance(float_value, str):\n        return
              float_value\n    if not isinstance(float_value, (float, int)):\n        raise
              TypeError(''Value \"{}\" has type \"{}\" instead of float.''.format(str(float_value),
              str(type(float_value))))\n    return str(float_value)\n\nimport argparse\n_parser
              = argparse.ArgumentParser(prog=''F2'', description='''')\n_parser.add_argument(\"--x\",
              dest=\"x\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
              dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
              = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = f2(**_parsed_args)\n\n_outputs
              = [_outputs]\n\n_output_serializers = [\n    _serialize_float,\n\n]\n\nimport
              os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
              OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
              "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}},
              "inputs": [{"name": "x", "type": "Float"}], "name": "F2", "outputs":
              [{"name": "Output", "type": "Float"}]}'}
      timeout: 0s
    - name: g
      params:
      - {name: f1-Output, value: $(tasks.f1.results.output)}
      - {name: f2-Output, value: $(tasks.f2.results.output)}
      taskSpec:
        steps:
        - name: main
          args: [--x, $(inputs.params.f1-Output), --y, $(inputs.params.f2-Output),
            '----output-paths', $(results.output.path)]
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            echo -n "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def g(x,y):
                import numpy as np

                return x + y

            def _serialize_float(float_value: float) -> str:
                if isinstance(float_value, str):
                    return float_value
                if not isinstance(float_value, (float, int)):
                    raise TypeError('Value "{}" has type "{}" instead of float.'.format(str(float_value), str(type(float_value))))
                return str(float_value)

            import argparse
            _parser = argparse.ArgumentParser(prog='G', description='')
            _parser.add_argument("--x", dest="x", type=float, required=True, default=argparse.SUPPRESS)
            _parser.add_argument("--y", dest="y", type=float, required=True, default=argparse.SUPPRESS)
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = g(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_float,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
        params:
        - {name: f1-Output}
        - {name: f2-Output}
        results:
        - {name: output, description: /tmp/outputs/Output/data}
        metadata:
          annotations: {pipelines.kubeflow.org/component_spec: '{"implementation":
              {"container": {"args": ["--x", {"inputValue": "x"}, "--y", {"inputValue":
              "y"}, "----output-paths", {"outputPath": "Output"}], "command": ["sh",
              "-ec", "program_path=$(mktemp)\necho -n \"$0\" > \"$program_path\"\npython3
              -u \"$program_path\" \"$@\"\n", "def g(x,y):\n    import numpy as np\n\n    return
              x + y\n\ndef _serialize_float(float_value: float) -> str:\n    if isinstance(float_value,
              str):\n        return float_value\n    if not isinstance(float_value,
              (float, int)):\n        raise TypeError(''Value \"{}\" has type \"{}\"
              instead of float.''.format(str(float_value), str(type(float_value))))\n    return
              str(float_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''G'',
              description='''')\n_parser.add_argument(\"--x\", dest=\"x\", type=float,
              required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--y\",
              dest=\"y\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
              dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
              = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = g(**_parsed_args)\n\n_outputs
              = [_outputs]\n\n_output_serializers = [\n    _serialize_float,\n\n]\n\nimport
              os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
              OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
              "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}},
              "inputs": [{"name": "x", "type": "Float"}, {"name": "y", "type": "Float"}],
              "name": "G", "outputs": [{"name": "Output", "type": "Float"}]}'}
      timeout: 0s
  timeout: 0s
