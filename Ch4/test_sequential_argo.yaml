apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: full-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.3.0, pipelines.kubeflow.org/pipeline_compilation_time: '2021-06-22T11:45:14.405750',
    pipelines.kubeflow.org/pipeline_spec: '{"name": "Full pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.3.0}
spec:
  entrypoint: full-pipeline
  templates:
  - name: download-data
    container:
      args: ['----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        download_data = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCl9tYWtlX3NrZWxfZnVuYwpxAWNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfYnVpbHRpbl90eXBlCnECWAgAAABDb2RlVHlwZXEDhXEEUnEFKEsASwBLBksFS0NDdnQAgwB9AGQOZANkBIQBfQF8AWQBZAVkBo0CXAJ9An0DfAFkB2QIZAaNAlwCfQR9BXQBdAJ8AIMCAQB0A3QCfAJkCXwAgwQBAHQDdAJ8A2QKfACDBAEAdAN0AnwEZAt8AIMEAQB0A3QCfAVkDHwAgwQBAGQNUwBxBihYMgAAAERvd25sb2FkIGFuZCBzdG9yZSBkYXRhIGluIHBlcnNpc3RlbnQgc3RvcmFnZQogICAgcQdN6ANOaAUoSwJLAEsHSwZLU0PifAFkAGsJchR0AGoBagJ8AYMBAQBnAH0CZwB9A3iodAN8AIMBRABdnH0EdABqAWoEgwB9BXQAagFqBGQBZAJ0AGoFFACDAn0GfAJqBnwFdABqB3wGgwEUAHwFdABqCHwGgwEUAGcCgwEBAHwDagZkAYMBAQBkA3QAagFqBIMAFwB9BXQAagFqBGQBZAJ0AGoFFACDAn0GfAJqBnwFdABqB3wGgwEUAHwFdABqCHwGgwEUAGcCgwEBAHwDagZkBIMBAQBxJlcAdABqCXwCgwF9AnQAagl8A4MBfQN8AnwDZgJTAHEIKE5LAEsCSwNLAXRxCShYAgAAAG5wcQpYBgAAAHJhbmRvbXELWAQAAABzZWVkcQxYBQAAAHJhbmdlcQ1YBwAAAHVuaWZvcm1xDlgCAAAAcGlxD1gGAAAAYXBwZW5kcRBYAwAAAGNvc3ERWAMAAABzaW5xElgFAAAAYXJyYXlxE3RxFChYCgAAAE5fZXhhbXBsZXNxFWgMWAgAAABmZWF0dXJlc3EWWAYAAAB0YXJnZXRxF1gBAAAAaXEYWAEAAABycRlYBQAAAHRoZXRhcRp0cRtYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXEcWBQAAABnZW5lcmF0ZV9iaW5hcnlfZGF0YXEdS3lDIAAJCAEMAgQBBAIOAgoBFAIiAQoDDgEUAiIBDgIKAQoCcR4pKXRxH1JxIFgrAAAAZG93bmxvYWRfZGF0YS48bG9jYWxzPi5nZW5lcmF0ZV9iaW5hcnlfZGF0YXEhS2RoFWgMhnEiTfQBS2lYDgAAAGZlYXR1cmVzX3RyYWlucSNYDAAAAHRhcmdldF90cmFpbnEkWA0AAABmZWF0dXJlc190ZXN0cSVYCwAAAHRhcmdldF90ZXN0cSZLAE3oA06GcSd0cSgoWAoAAABnZXRfY2xpZW50cSlYDQAAAGNyZWF0ZV9idWNrZXRxKlgLAAAAYnVja2V0X25hbWVxK1gOAAAAd3JpdGVfdG9fc3RvcmVxLHRxLShYBgAAAGNsaWVudHEuaB1oI2gkaCVoJnRxL2gcWA0AAABkb3dubG9hZF9kYXRhcTBLdEMUAAMGAgojEAEQAgoBDgEOAQ4BDgJxMSkpdHEyUnEzSv////99cTSHcTVScTZ9cTcoWAcAAABnbG9iYWxzcTh9cTkoaCtYDwAAAG9wZi1kYXRhY2F0YWxvZ3E6aCloAChoAWgFKEsDSwBLBEsHS0NDGHQAagFkAXwAfAF8AmQCZAONBX0DfANTAHE7KE5YAgAAAHMzcTyIKFgMAAAAc2VydmljZV9uYW1lcT1YEQAAAGF3c19hY2Nlc3Nfa2V5X2lkcT5YFQAAAGF3c19zZWNyZXRfYWNjZXNzX2tleXE/WAwAAABlbmRwb2ludF91cmxxQFgGAAAAdmVyaWZ5cUF0cUJ0cUNYBQAAAGJvdG8zcURoLoZxRShYDQAAAHMzX2FjY2Vzc19rZXlxRlgNAAAAczNfc2VjcmV0X2tleXFHWA8AAABzM19lbmRwb2ludF91cmxxSGgudHFJWCsAAAAvaG9tZS9zYW5qYXkva3ViZWZsb3dfdXNlY2FzZXMvQ2g0L3V0aWxzLnB5cUpoKUsFQwwABAYBAgECAQIBCAJxSykpdHFMUnFNSv////99cU6HcU9ScVB9cVEoaDh9cVJoRGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpzdWJpbXBvcnQKcVNoRIVxVFJxVXNYCAAAAGRlZmF1bHRzcVZOTk6HcVdYBAAAAGRpY3RxWH1xWVgGAAAAbW9kdWxlcVpYBQAAAHV0aWxzcVtYDgAAAGNsb3N1cmVfdmFsdWVzcVxOWAgAAABxdWFsbmFtZXFdaCl1dFJoLGgAKGgBaAUoSwRLAEsESwVLQ0M0dAB8AHwDgwJzGnQBZAF8AJsAZAKdA4MBggF8A2oCdANqBHwBgwF8AHwCZAONAwEAZABTAHFeKE5YBwAAAEJ1Y2tldCBxX1gPAAAAIGRvZXMgbm90IGV4aXN0cWBYBAAAAEJvZHlxYVgGAAAAQnVja2V0cWJYAwAAAEtleXFjh3FkdHFlKFgTAAAAY2hlY2tfYnVja2V0X2V4aXN0c3FmWAoAAABWYWx1ZUVycm9ycWdYCgAAAHB1dF9vYmplY3RxaFgGAAAAcGlja2xlcWlYBQAAAGR1bXBzcWp0cWsoWAYAAABidWNrZXRxbFgEAAAAZGF0YXFtWAMAAABrZXlxbmgudHFvaEpoLEsRQwoAAQoBEAIMAQIBcXApKXRxcVJxckr/////aE6HcXNScXR9cXUoaDh9cXYoaGloU2hphXF3UnF4aGZoAChoAWgFKEsCSwBLAksES0NDGnwAZAFkAoQAfAFqAIMAZAMZAEQAgwFrBlMAcXkoTmgFKEsBSwBLAksES1NDFGcAfABdDH0BfAFkABkAkQJxBFMAcXpYBAAAAE5hbWVxe4VxfClYAgAAAC4wcX1oGIZxfmhKWAoAAAA8bGlzdGNvbXA+cX9LJEMCBgBxgCkpdHGBUnGCWCcAAABjaGVja19idWNrZXRfZXhpc3RzLjxsb2NhbHM+LjxsaXN0Y29tcD5xg1gHAAAAQnVja2V0c3GEdHGFWAwAAABsaXN0X2J1Y2tldHNxhoVxh2hsaC6GcYhoSmhmSyNDAgABcYkpKXRxilJxi0r/////aE6HcYxScY19cY4oaDh9cY9oVk5oWH1xkGhaaFtoXE5oXWhmdXRSdWhWTmhYfXGRaFpoW2hcTmhdaCx1dFJoCmhTWAUAAABudW1weXGShXGTUnGUaCpoAChoAWgFKEsCSwBLAksDS0NDGnQAfAB8AYMCcxZ8AWoBfABkAY0BAQBkAFMAcZVOaGKFcZaGcZdoZmgqhnGYaGxoLoZxmWhKaCpLJkMEAAEKAXGaKSl0cZtScZxK/////2hOh3GdUnGefXGfKGg4fXGgaGZojXNoVk5oWH1xoWhaaFtoXE5oXWgqdXRSdWhWTmhYfXGiaFpYCAAAAF9fbWFpbl9fcaNoXE5oXWgwdXRSLg=='))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Download data', description='Download and store data in persistent storage')
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = download_data(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      artifacts:
      - {name: download-data-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Download
          and store data in persistent storage", "implementation": {"container": {"args":
          ["----output-paths", {"outputPath": "Output"}], "command": ["sh", "-c",
          "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
          ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
          --no-warn-script-location ''boto3'' --user) && \"$0\" \"$@\"", "sh", "-ec",
          "program_path=$(mktemp)\necho -n \"$0\" > \"$program_path\"\npython3 -u
          \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import cloudpickle as
          _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ndownload_data = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCl9tYWtlX3NrZWxfZnVuYwpxAWNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfYnVpbHRpbl90eXBlCnECWAgAAABDb2RlVHlwZXEDhXEEUnEFKEsASwBLBksFS0NDdnQAgwB9AGQOZANkBIQBfQF8AWQBZAVkBo0CXAJ9An0DfAFkB2QIZAaNAlwCfQR9BXQBdAJ8AIMCAQB0A3QCfAJkCXwAgwQBAHQDdAJ8A2QKfACDBAEAdAN0AnwEZAt8AIMEAQB0A3QCfAVkDHwAgwQBAGQNUwBxBihYMgAAAERvd25sb2FkIGFuZCBzdG9yZSBkYXRhIGluIHBlcnNpc3RlbnQgc3RvcmFnZQogICAgcQdN6ANOaAUoSwJLAEsHSwZLU0PifAFkAGsJchR0AGoBagJ8AYMBAQBnAH0CZwB9A3iodAN8AIMBRABdnH0EdABqAWoEgwB9BXQAagFqBGQBZAJ0AGoFFACDAn0GfAJqBnwFdABqB3wGgwEUAHwFdABqCHwGgwEUAGcCgwEBAHwDagZkAYMBAQBkA3QAagFqBIMAFwB9BXQAagFqBGQBZAJ0AGoFFACDAn0GfAJqBnwFdABqB3wGgwEUAHwFdABqCHwGgwEUAGcCgwEBAHwDagZkBIMBAQBxJlcAdABqCXwCgwF9AnQAagl8A4MBfQN8AnwDZgJTAHEIKE5LAEsCSwNLAXRxCShYAgAAAG5wcQpYBgAAAHJhbmRvbXELWAQAAABzZWVkcQxYBQAAAHJhbmdlcQ1YBwAAAHVuaWZvcm1xDlgCAAAAcGlxD1gGAAAAYXBwZW5kcRBYAwAAAGNvc3ERWAMAAABzaW5xElgFAAAAYXJyYXlxE3RxFChYCgAAAE5fZXhhbXBsZXNxFWgMWAgAAABmZWF0dXJlc3EWWAYAAAB0YXJnZXRxF1gBAAAAaXEYWAEAAABycRlYBQAAAHRoZXRhcRp0cRtYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXEcWBQAAABnZW5lcmF0ZV9iaW5hcnlfZGF0YXEdS3lDIAAJCAEMAgQBBAIOAgoBFAIiAQoDDgEUAiIBDgIKAQoCcR4pKXRxH1JxIFgrAAAAZG93bmxvYWRfZGF0YS48bG9jYWxzPi5nZW5lcmF0ZV9iaW5hcnlfZGF0YXEhS2RoFWgMhnEiTfQBS2lYDgAAAGZlYXR1cmVzX3RyYWlucSNYDAAAAHRhcmdldF90cmFpbnEkWA0AAABmZWF0dXJlc190ZXN0cSVYCwAAAHRhcmdldF90ZXN0cSZLAE3oA06GcSd0cSgoWAoAAABnZXRfY2xpZW50cSlYDQAAAGNyZWF0ZV9idWNrZXRxKlgLAAAAYnVja2V0X25hbWVxK1gOAAAAd3JpdGVfdG9fc3RvcmVxLHRxLShYBgAAAGNsaWVudHEuaB1oI2gkaCVoJnRxL2gcWA0AAABkb3dubG9hZF9kYXRhcTBLdEMUAAMGAgojEAEQAgoBDgEOAQ4BDgJxMSkpdHEyUnEzSv////99cTSHcTVScTZ9cTcoWAcAAABnbG9iYWxzcTh9cTkoaCtYDwAAAG9wZi1kYXRhY2F0YWxvZ3E6aCloAChoAWgFKEsDSwBLBEsHS0NDGHQAagFkAXwAfAF8AmQCZAONBX0DfANTAHE7KE5YAgAAAHMzcTyIKFgMAAAAc2VydmljZV9uYW1lcT1YEQAAAGF3c19hY2Nlc3Nfa2V5X2lkcT5YFQAAAGF3c19zZWNyZXRfYWNjZXNzX2tleXE/WAwAAABlbmRwb2ludF91cmxxQFgGAAAAdmVyaWZ5cUF0cUJ0cUNYBQAAAGJvdG8zcURoLoZxRShYDQAAAHMzX2FjY2Vzc19rZXlxRlgNAAAAczNfc2VjcmV0X2tleXFHWA8AAABzM19lbmRwb2ludF91cmxxSGgudHFJWCsAAAAvaG9tZS9zYW5qYXkva3ViZWZsb3dfdXNlY2FzZXMvQ2g0L3V0aWxzLnB5cUpoKUsFQwwABAYBAgECAQIBCAJxSykpdHFMUnFNSv////99cU6HcU9ScVB9cVEoaDh9cVJoRGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpzdWJpbXBvcnQKcVNoRIVxVFJxVXNYCAAAAGRlZmF1bHRzcVZOTk6HcVdYBAAAAGRpY3RxWH1xWVgGAAAAbW9kdWxlcVpYBQAAAHV0aWxzcVtYDgAAAGNsb3N1cmVfdmFsdWVzcVxOWAgAAABxdWFsbmFtZXFdaCl1dFJoLGgAKGgBaAUoSwRLAEsESwVLQ0M0dAB8AHwDgwJzGnQBZAF8AJsAZAKdA4MBggF8A2oCdANqBHwBgwF8AHwCZAONAwEAZABTAHFeKE5YBwAAAEJ1Y2tldCBxX1gPAAAAIGRvZXMgbm90IGV4aXN0cWBYBAAAAEJvZHlxYVgGAAAAQnVja2V0cWJYAwAAAEtleXFjh3FkdHFlKFgTAAAAY2hlY2tfYnVja2V0X2V4aXN0c3FmWAoAAABWYWx1ZUVycm9ycWdYCgAAAHB1dF9vYmplY3RxaFgGAAAAcGlja2xlcWlYBQAAAGR1bXBzcWp0cWsoWAYAAABidWNrZXRxbFgEAAAAZGF0YXFtWAMAAABrZXlxbmgudHFvaEpoLEsRQwoAAQoBEAIMAQIBcXApKXRxcVJxckr/////aE6HcXNScXR9cXUoaDh9cXYoaGloU2hphXF3UnF4aGZoAChoAWgFKEsCSwBLAksES0NDGnwAZAFkAoQAfAFqAIMAZAMZAEQAgwFrBlMAcXkoTmgFKEsBSwBLAksES1NDFGcAfABdDH0BfAFkABkAkQJxBFMAcXpYBAAAAE5hbWVxe4VxfClYAgAAAC4wcX1oGIZxfmhKWAoAAAA8bGlzdGNvbXA+cX9LJEMCBgBxgCkpdHGBUnGCWCcAAABjaGVja19idWNrZXRfZXhpc3RzLjxsb2NhbHM+LjxsaXN0Y29tcD5xg1gHAAAAQnVja2V0c3GEdHGFWAwAAABsaXN0X2J1Y2tldHNxhoVxh2hsaC6GcYhoSmhmSyNDAgABcYkpKXRxilJxi0r/////aE6HcYxScY19cY4oaDh9cY9oVk5oWH1xkGhaaFtoXE5oXWhmdXRSdWhWTmhYfXGRaFpoW2hcTmhdaCx1dFJoCmhTWAUAAABudW1weXGShXGTUnGUaCpoAChoAWgFKEsCSwBLAksDS0NDGnQAfAB8AYMCcxZ8AWoBfABkAY0BAQBkAFMAcZVOaGKFcZaGcZdoZmgqhnGYaGxoLoZxmWhKaCpLJkMEAAEKAXGaKSl0cZtScZxK/////2hOh3GdUnGefXGfKGg4fXGgaGZojXNoVk5oWH1xoWhaaFtoXE5oXWgqdXRSdWhWTmhYfXGiaFpYCAAAAF9fbWFpbl9fcaNoXE5oXWgwdXRSLg==''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Download
          data'', description=''Download and store data in persistent storage'')\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = download_data(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "name":
          "Download data", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}'}
  - name: full-pipeline
    dag:
      tasks:
      - {name: download-data, template: download-data}
      - name: generate-random-search-point
        template: generate-random-search-point
        dependencies: [download-data]
      - name: generate-random-search-point-10
        template: generate-random-search-point-10
        dependencies: [train-model-9]
      - name: generate-random-search-point-2
        template: generate-random-search-point-2
        dependencies: [train-model]
      - name: generate-random-search-point-3
        template: generate-random-search-point-3
        dependencies: [train-model-2]
      - name: generate-random-search-point-4
        template: generate-random-search-point-4
        dependencies: [train-model-3]
      - name: generate-random-search-point-5
        template: generate-random-search-point-5
        dependencies: [train-model-4]
      - name: generate-random-search-point-6
        template: generate-random-search-point-6
        dependencies: [train-model-5]
      - name: generate-random-search-point-7
        template: generate-random-search-point-7
        dependencies: [train-model-6]
      - name: generate-random-search-point-8
        template: generate-random-search-point-8
        dependencies: [train-model-7]
      - name: generate-random-search-point-9
        template: generate-random-search-point-9
        dependencies: [train-model-8]
      - name: print-gen-val
        template: print-gen-val
        dependencies: [train-model-10]
      - name: train-model
        template: train-model
        dependencies: [generate-random-search-point]
        arguments:
          parameters:
          - {name: generate-random-search-point-Output, value: '{{tasks.generate-random-search-point.outputs.parameters.generate-random-search-point-Output}}'}
      - name: train-model-10
        template: train-model-10
        dependencies: [generate-random-search-point-10]
        arguments:
          parameters:
          - {name: generate-random-search-point-10-Output, value: '{{tasks.generate-random-search-point-10.outputs.parameters.generate-random-search-point-10-Output}}'}
      - name: train-model-2
        template: train-model-2
        dependencies: [generate-random-search-point-2]
        arguments:
          parameters:
          - {name: generate-random-search-point-2-Output, value: '{{tasks.generate-random-search-point-2.outputs.parameters.generate-random-search-point-2-Output}}'}
      - name: train-model-3
        template: train-model-3
        dependencies: [generate-random-search-point-3]
        arguments:
          parameters:
          - {name: generate-random-search-point-3-Output, value: '{{tasks.generate-random-search-point-3.outputs.parameters.generate-random-search-point-3-Output}}'}
      - name: train-model-4
        template: train-model-4
        dependencies: [generate-random-search-point-4]
        arguments:
          parameters:
          - {name: generate-random-search-point-4-Output, value: '{{tasks.generate-random-search-point-4.outputs.parameters.generate-random-search-point-4-Output}}'}
      - name: train-model-5
        template: train-model-5
        dependencies: [generate-random-search-point-5]
        arguments:
          parameters:
          - {name: generate-random-search-point-5-Output, value: '{{tasks.generate-random-search-point-5.outputs.parameters.generate-random-search-point-5-Output}}'}
      - name: train-model-6
        template: train-model-6
        dependencies: [generate-random-search-point-6]
        arguments:
          parameters:
          - {name: generate-random-search-point-6-Output, value: '{{tasks.generate-random-search-point-6.outputs.parameters.generate-random-search-point-6-Output}}'}
      - name: train-model-7
        template: train-model-7
        dependencies: [generate-random-search-point-7]
        arguments:
          parameters:
          - {name: generate-random-search-point-7-Output, value: '{{tasks.generate-random-search-point-7.outputs.parameters.generate-random-search-point-7-Output}}'}
      - name: train-model-8
        template: train-model-8
        dependencies: [generate-random-search-point-8]
        arguments:
          parameters:
          - {name: generate-random-search-point-8-Output, value: '{{tasks.generate-random-search-point-8.outputs.parameters.generate-random-search-point-8-Output}}'}
      - name: train-model-9
        template: train-model-9
        dependencies: [generate-random-search-point-9]
        arguments:
          parameters:
          - {name: generate-random-search-point-9-Output, value: '{{tasks.generate-random-search-point-9.outputs.parameters.generate-random-search-point-9-Output}}'}
  - name: generate-random-search-point
    container:
      args: [--iter-val, '0', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        generate_random_search_point = pickle.loads(base64.b64decode(b'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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Generate random search point', description='')
        _parser.add_argument("--iter-val", dest="iter_val", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = generate_random_search_point(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      parameters:
      - name: generate-random-search-point-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: generate-random-search-point-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--iter-val", {"inputValue": "iter_val"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ngenerate_random_search_point = pickle.loads(base64.b64decode(b''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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Generate
          random search point'', description='''')\n_parser.add_argument(\"--iter-val\",
          dest=\"iter_val\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = generate_random_search_point(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "iter_val", "type": "Integer"}], "name": "Generate random search
          point", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"iter_val": "0"}'}
  - name: generate-random-search-point-10
    container:
      args: [--iter-val, '9', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        generate_random_search_point = pickle.loads(base64.b64decode(b'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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Generate random search point', description='')
        _parser.add_argument("--iter-val", dest="iter_val", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = generate_random_search_point(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      parameters:
      - name: generate-random-search-point-10-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: generate-random-search-point-10-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--iter-val", {"inputValue": "iter_val"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ngenerate_random_search_point = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgMAAAAbnVtcHkucmFuZG9tcQKFcQNScQQwY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCl9tYWtlX3NrZWxfZnVuYwpxBWNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfYnVpbHRpbl90eXBlCnEGWAgAAABDb2RlVHlwZXEHhXEIUnEJKEsBSwBLA0sFS0ND+HQAgwB9AXQBfACDAQEAfABkAWsCckRkAmQDZANkBGQFnAR9AnQCdAN8AmQGfACbAJ0CfAGDBAEAdAF8AoMBAQB8AFMAdAR0A2QGfABkAxgAmwCdAnwBgwN9AnQFfAJkBxkAdAZqB2oIZAiDAWQDGAAXAGQDgwJ8AmQHPAB0BXwCZAkZAHQGagdqCGQIgwFkAxgAFwBkA4MCfAJkCTwAfAJkChkAZAt0BmoHaghkCIMBZAMYABMAFAB8AmQKPAB0BmoHagmDAGQMawBy0GQEbgJkDXwCZA48AHQCdAN8AmQGfACbAJ0CfAGDBAEAdAF8AoMBAQB8AFMAcQooTksARz+EeuFHrhR7SwFYBAAAAHJlbHVxCyhYAgAAAGxycQxYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcQ1YCQAAAG51bV9ub2Rlc3EOWAoAAABhY3RpdmF0aW9ucQ90cRBYBQAAAGNvbmZfcRFoDksDaA1oDEsKRz/gAAAAAAAAWAcAAABzaWdtb2lkcRJoD3RxEyhYCgAAAGdldF9jbGllbnRxFFgFAAAAcHJpbnRxFVgOAAAAd3JpdGVfdG9fc3RvcmVxFlgLAAAAYnVja2V0X25hbWVxF1gPAAAAcmVhZF9mcm9tX3N0b3JlcRhYAwAAAG1heHEZWAIAAABucHEaWAYAAAByYW5kb21xG1gHAAAAcmFuZGludHEcWAcAAAB1bmlmb3JtcR10cR5YCAAAAGl0ZXJfdmFscR9YBgAAAGNsaWVudHEgWAQAAABjb25mcSGHcSJYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXEjWBwAAABnZW5lcmF0ZV9yYW5kb21fc2VhcmNoX3BvaW50cSRLQkMkAAYGAQgCCAICAQIBAgEIAhQBCAEEAhYDIgMiAyADGgIUAQgCcSUpKXRxJlJxJ0r/////fXEoh3EpUnEqfXErKFgHAAAAZ2xvYmFsc3EsfXEtKGgYaAAoaAVoCShLA0sASwRLBEtDQzp0AHwAfAKDAnMadAFkAXwAmwBkAp0DgwGCAXwCagJ8AHwBZAONAmQEGQBqA2oEfQN0BWoGfAODAVMAcS4oTlgHAAAAQnVja2V0IHEvWA8AAAAgZG9lcyBub3QgZXhpc3RxMFgGAAAAQnVja2V0cTFYAwAAAEtleXEyhnEzWAQAAABCb2R5cTR0cTUoWBMAAABjaGVja19idWNrZXRfZXhpc3RzcTZYCgAAAFZhbHVlRXJyb3JxN1gKAAAAZ2V0X29iamVjdHE4WAsAAABfcmF3X3N0cmVhbXE5WAQAAABkYXRhcTpYBgAAAHBpY2tsZXE7WAUAAABsb2Fkc3E8dHE9KFgGAAAAYnVja2V0cT5YAwAAAGtleXE/aCBYCAAAAHJhd19kYXRhcUB0cUFYKwAAAC9ob21lL3NhbmpheS9rdWJlZmxvd191c2VjYXNlcy9DaDQvdXRpbHMucHlxQmgYSxpDCgABCgEQAgYBEAJxQykpdHFEUnFFSv////99cUaHcUdScUh9cUkoaCx9cUooaDtoAWg7hXFLUnFMaDZoAChoBWgJKEsCSwBLAksES0NDGnwAZAFkAoQAfAFqAIMAZAMZAEQAgwFrBlMAcU0oTmgJKEsBSwBLAksES1NDFGcAfABdDH0BfAFkABkAkQJxBFMAcU5YBAAAAE5hbWVxT4VxUClYAgAAAC4wcVFYAQAAAGlxUoZxU2hCWAoAAAA8bGlzdGNvbXA+cVRLJEMCBgBxVSkpdHFWUnFXWCcAAABjaGVja19idWNrZXRfZXhpc3RzLjxsb2NhbHM+LjxsaXN0Y29tcD5xWFgHAAAAQnVja2V0c3FZdHFaWAwAAABsaXN0X2J1Y2tldHNxW4VxXGg+aCCGcV1oQmg2SyNDAgABcV4pKXRxX1JxYEr/////aEaHcWFScWJ9cWMoaCx9cWRYCAAAAGRlZmF1bHRzcWVOWAQAAABkaWN0cWZ9cWdYBgAAAG1vZHVsZXFoWAUAAAB1dGlsc3FpWA4AAABjbG9zdXJlX3ZhbHVlc3FqTlgIAAAAcXVhbG5hbWVxa2g2dXRSdWhlTmhmfXFsaGhoaWhqTmhraBh1dFJoFGgAKGgFaAkoSwNLAEsESwdLQ0MYdABqAWQBfAB8AXwCZAJkA40FfQN8A1MAcW0oTlgCAAAAczNxbogoWAwAAABzZXJ2aWNlX25hbWVxb1gRAAAAYXdzX2FjY2Vzc19rZXlfaWRxcFgVAAAAYXdzX3NlY3JldF9hY2Nlc3Nfa2V5cXFYDAAAAGVuZHBvaW50X3VybHFyWAYAAAB2ZXJpZnlxc3RxdHRxdVgFAAAAYm90bzNxdmgghnF3KFgNAAAAczNfYWNjZXNzX2tleXF4WA0AAABzM19zZWNyZXRfa2V5cXlYDwAAAHMzX2VuZHBvaW50X3VybHF6aCB0cXtoQmgUSwVDDAAEBgECAQIBAgEIAnF8KSl0cX1ScX5K/////2hGh3F/UnGAfXGBKGgsfXGCaHZoAWh2hXGDUnGEc2hlTk5Oh3GFaGZ9cYZoaGhpaGpOaGtoFHV0UmgWaAAoaAVoCShLBEsASwRLBUtDQzR0AHwAfAODAnMadAFkAXwAmwBkAp0DgwGCAXwDagJ0A2oEfAGDAXwAfAJkA40DAQBkAFMAcYcoTlgHAAAAQnVja2V0IHGIWA8AAAAgZG9lcyBub3QgZXhpc3RxiWg0aDFoModxinRxiyhoNmg3WAoAAABwdXRfb2JqZWN0cYxoO1gFAAAAZHVtcHNxjXRxjihoPmg6aD9oIHRxj2hCaBZLEUMKAAEKARACDAECAXGQKSl0cZFScZJK/////2hGh3GTUnGUfXGVKGgsfXGWKGg7aExoNmhidWhlTmhmfXGXaGhoaWhqTmhraBZ1dFJoF1gPAAAAb3BmLWRhdGFjYXRhbG9ncZhoGmgBWAUAAABudW1weXGZhXGaUnGbdWhlTmhmfXGcaGhYCAAAAF9fbWFpbl9fcZ1oak5oa2gkdXRSLg==''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Generate
          random search point'', description='''')\n_parser.add_argument(\"--iter-val\",
          dest=\"iter_val\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = generate_random_search_point(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "iter_val", "type": "Integer"}], "name": "Generate random search
          point", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"iter_val": "9"}'}
  - name: generate-random-search-point-2
    container:
      args: [--iter-val, '1', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        generate_random_search_point = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgMAAAAbnVtcHkucmFuZG9tcQKFcQNScQQwY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCl9tYWtlX3NrZWxfZnVuYwpxBWNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfYnVpbHRpbl90eXBlCnEGWAgAAABDb2RlVHlwZXEHhXEIUnEJKEsBSwBLA0sFS0ND+HQAgwB9AXQBfACDAQEAfABkAWsCckRkAmQDZANkBGQFnAR9AnQCdAN8AmQGfACbAJ0CfAGDBAEAdAF8AoMBAQB8AFMAdAR0A2QGfABkAxgAmwCdAnwBgwN9AnQFfAJkBxkAdAZqB2oIZAiDAWQDGAAXAGQDgwJ8AmQHPAB0BXwCZAkZAHQGagdqCGQIgwFkAxgAFwBkA4MCfAJkCTwAfAJkChkAZAt0BmoHaghkCIMBZAMYABMAFAB8AmQKPAB0BmoHagmDAGQMawBy0GQEbgJkDXwCZA48AHQCdAN8AmQGfACbAJ0CfAGDBAEAdAF8AoMBAQB8AFMAcQooTksARz+EeuFHrhR7SwFYBAAAAHJlbHVxCyhYAgAAAGxycQxYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcQ1YCQAAAG51bV9ub2Rlc3EOWAoAAABhY3RpdmF0aW9ucQ90cRBYBQAAAGNvbmZfcRFoDksDaA1oDEsKRz/gAAAAAAAAWAcAAABzaWdtb2lkcRJoD3RxEyhYCgAAAGdldF9jbGllbnRxFFgFAAAAcHJpbnRxFVgOAAAAd3JpdGVfdG9fc3RvcmVxFlgLAAAAYnVja2V0X25hbWVxF1gPAAAAcmVhZF9mcm9tX3N0b3JlcRhYAwAAAG1heHEZWAIAAABucHEaWAYAAAByYW5kb21xG1gHAAAAcmFuZGludHEcWAcAAAB1bmlmb3JtcR10cR5YCAAAAGl0ZXJfdmFscR9YBgAAAGNsaWVudHEgWAQAAABjb25mcSGHcSJYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXEjWBwAAABnZW5lcmF0ZV9yYW5kb21fc2VhcmNoX3BvaW50cSRLQkMkAAYGAQgCCAICAQIBAgEIAhQBCAEEAhYDIgMiAyADGgIUAQgCcSUpKXRxJlJxJ0r/////fXEoh3EpUnEqfXErKFgHAAAAZ2xvYmFsc3EsfXEtKGgYaAAoaAVoCShLA0sASwRLBEtDQzp0AHwAfAKDAnMadAFkAXwAmwBkAp0DgwGCAXwCagJ8AHwBZAONAmQEGQBqA2oEfQN0BWoGfAODAVMAcS4oTlgHAAAAQnVja2V0IHEvWA8AAAAgZG9lcyBub3QgZXhpc3RxMFgGAAAAQnVja2V0cTFYAwAAAEtleXEyhnEzWAQAAABCb2R5cTR0cTUoWBMAAABjaGVja19idWNrZXRfZXhpc3RzcTZYCgAAAFZhbHVlRXJyb3JxN1gKAAAAZ2V0X29iamVjdHE4WAsAAABfcmF3X3N0cmVhbXE5WAQAAABkYXRhcTpYBgAAAHBpY2tsZXE7WAUAAABsb2Fkc3E8dHE9KFgGAAAAYnVja2V0cT5YAwAAAGtleXE/aCBYCAAAAHJhd19kYXRhcUB0cUFYKwAAAC9ob21lL3NhbmpheS9rdWJlZmxvd191c2VjYXNlcy9DaDQvdXRpbHMucHlxQmgYSxpDCgABCgEQAgYBEAJxQykpdHFEUnFFSv////99cUaHcUdScUh9cUkoaCx9cUooaDtoAWg7hXFLUnFMaDZoAChoBWgJKEsCSwBLAksES0NDGnwAZAFkAoQAfAFqAIMAZAMZAEQAgwFrBlMAcU0oTmgJKEsBSwBLAksES1NDFGcAfABdDH0BfAFkABkAkQJxBFMAcU5YBAAAAE5hbWVxT4VxUClYAgAAAC4wcVFYAQAAAGlxUoZxU2hCWAoAAAA8bGlzdGNvbXA+cVRLJEMCBgBxVSkpdHFWUnFXWCcAAABjaGVja19idWNrZXRfZXhpc3RzLjxsb2NhbHM+LjxsaXN0Y29tcD5xWFgHAAAAQnVja2V0c3FZdHFaWAwAAABsaXN0X2J1Y2tldHNxW4VxXGg+aCCGcV1oQmg2SyNDAgABcV4pKXRxX1JxYEr/////aEaHcWFScWJ9cWMoaCx9cWRYCAAAAGRlZmF1bHRzcWVOWAQAAABkaWN0cWZ9cWdYBgAAAG1vZHVsZXFoWAUAAAB1dGlsc3FpWA4AAABjbG9zdXJlX3ZhbHVlc3FqTlgIAAAAcXVhbG5hbWVxa2g2dXRSdWhlTmhmfXFsaGhoaWhqTmhraBh1dFJoFGgAKGgFaAkoSwNLAEsESwdLQ0MYdABqAWQBfAB8AXwCZAJkA40FfQN8A1MAcW0oTlgCAAAAczNxbogoWAwAAABzZXJ2aWNlX25hbWVxb1gRAAAAYXdzX2FjY2Vzc19rZXlfaWRxcFgVAAAAYXdzX3NlY3JldF9hY2Nlc3Nfa2V5cXFYDAAAAGVuZHBvaW50X3VybHFyWAYAAAB2ZXJpZnlxc3RxdHRxdVgFAAAAYm90bzNxdmgghnF3KFgNAAAAczNfYWNjZXNzX2tleXF4WA0AAABzM19zZWNyZXRfa2V5cXlYDwAAAHMzX2VuZHBvaW50X3VybHF6aCB0cXtoQmgUSwVDDAAEBgECAQIBAgEIAnF8KSl0cX1ScX5K/////2hGh3F/UnGAfXGBKGgsfXGCaHZoAWh2hXGDUnGEc2hlTk5Oh3GFaGZ9cYZoaGhpaGpOaGtoFHV0UmgWaAAoaAVoCShLBEsASwRLBUtDQzR0AHwAfAODAnMadAFkAXwAmwBkAp0DgwGCAXwDagJ0A2oEfAGDAXwAfAJkA40DAQBkAFMAcYcoTlgHAAAAQnVja2V0IHGIWA8AAAAgZG9lcyBub3QgZXhpc3RxiWg0aDFoModxinRxiyhoNmg3WAoAAABwdXRfb2JqZWN0cYxoO1gFAAAAZHVtcHNxjXRxjihoPmg6aD9oIHRxj2hCaBZLEUMKAAEKARACDAECAXGQKSl0cZFScZJK/////2hGh3GTUnGUfXGVKGgsfXGWKGg7aExoNmhidWhlTmhmfXGXaGhoaWhqTmhraBZ1dFJoF1gPAAAAb3BmLWRhdGFjYXRhbG9ncZhoGmgBWAUAAABudW1weXGZhXGaUnGbdWhlTmhmfXGcaGhYCAAAAF9fbWFpbl9fcZ1oak5oa2gkdXRSLg=='))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Generate random search point', description='')
        _parser.add_argument("--iter-val", dest="iter_val", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = generate_random_search_point(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      parameters:
      - name: generate-random-search-point-2-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: generate-random-search-point-2-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--iter-val", {"inputValue": "iter_val"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ngenerate_random_search_point = pickle.loads(base64.b64decode(b''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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Generate
          random search point'', description='''')\n_parser.add_argument(\"--iter-val\",
          dest=\"iter_val\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = generate_random_search_point(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "iter_val", "type": "Integer"}], "name": "Generate random search
          point", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"iter_val": "1"}'}
  - name: generate-random-search-point-3
    container:
      args: [--iter-val, '2', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        generate_random_search_point = pickle.loads(base64.b64decode(b'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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Generate random search point', description='')
        _parser.add_argument("--iter-val", dest="iter_val", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = generate_random_search_point(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      parameters:
      - name: generate-random-search-point-3-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: generate-random-search-point-3-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--iter-val", {"inputValue": "iter_val"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ngenerate_random_search_point = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgMAAAAbnVtcHkucmFuZG9tcQKFcQNScQQwY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCl9tYWtlX3NrZWxfZnVuYwpxBWNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfYnVpbHRpbl90eXBlCnEGWAgAAABDb2RlVHlwZXEHhXEIUnEJKEsBSwBLA0sFS0ND+HQAgwB9AXQBfACDAQEAfABkAWsCckRkAmQDZANkBGQFnAR9AnQCdAN8AmQGfACbAJ0CfAGDBAEAdAF8AoMBAQB8AFMAdAR0A2QGfABkAxgAmwCdAnwBgwN9AnQFfAJkBxkAdAZqB2oIZAiDAWQDGAAXAGQDgwJ8AmQHPAB0BXwCZAkZAHQGagdqCGQIgwFkAxgAFwBkA4MCfAJkCTwAfAJkChkAZAt0BmoHaghkCIMBZAMYABMAFAB8AmQKPAB0BmoHagmDAGQMawBy0GQEbgJkDXwCZA48AHQCdAN8AmQGfACbAJ0CfAGDBAEAdAF8AoMBAQB8AFMAcQooTksARz+EeuFHrhR7SwFYBAAAAHJlbHVxCyhYAgAAAGxycQxYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcQ1YCQAAAG51bV9ub2Rlc3EOWAoAAABhY3RpdmF0aW9ucQ90cRBYBQAAAGNvbmZfcRFoDksDaA1oDEsKRz/gAAAAAAAAWAcAAABzaWdtb2lkcRJoD3RxEyhYCgAAAGdldF9jbGllbnRxFFgFAAAAcHJpbnRxFVgOAAAAd3JpdGVfdG9fc3RvcmVxFlgLAAAAYnVja2V0X25hbWVxF1gPAAAAcmVhZF9mcm9tX3N0b3JlcRhYAwAAAG1heHEZWAIAAABucHEaWAYAAAByYW5kb21xG1gHAAAAcmFuZGludHEcWAcAAAB1bmlmb3JtcR10cR5YCAAAAGl0ZXJfdmFscR9YBgAAAGNsaWVudHEgWAQAAABjb25mcSGHcSJYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXEjWBwAAABnZW5lcmF0ZV9yYW5kb21fc2VhcmNoX3BvaW50cSRLQkMkAAYGAQgCCAICAQIBAgEIAhQBCAEEAhYDIgMiAyADGgIUAQgCcSUpKXRxJlJxJ0r/////fXEoh3EpUnEqfXErKFgHAAAAZ2xvYmFsc3EsfXEtKGgYaAAoaAVoCShLA0sASwRLBEtDQzp0AHwAfAKDAnMadAFkAXwAmwBkAp0DgwGCAXwCagJ8AHwBZAONAmQEGQBqA2oEfQN0BWoGfAODAVMAcS4oTlgHAAAAQnVja2V0IHEvWA8AAAAgZG9lcyBub3QgZXhpc3RxMFgGAAAAQnVja2V0cTFYAwAAAEtleXEyhnEzWAQAAABCb2R5cTR0cTUoWBMAAABjaGVja19idWNrZXRfZXhpc3RzcTZYCgAAAFZhbHVlRXJyb3JxN1gKAAAAZ2V0X29iamVjdHE4WAsAAABfcmF3X3N0cmVhbXE5WAQAAABkYXRhcTpYBgAAAHBpY2tsZXE7WAUAAABsb2Fkc3E8dHE9KFgGAAAAYnVja2V0cT5YAwAAAGtleXE/aCBYCAAAAHJhd19kYXRhcUB0cUFYKwAAAC9ob21lL3NhbmpheS9rdWJlZmxvd191c2VjYXNlcy9DaDQvdXRpbHMucHlxQmgYSxpDCgABCgEQAgYBEAJxQykpdHFEUnFFSv////99cUaHcUdScUh9cUkoaCx9cUooaDtoAWg7hXFLUnFMaDZoAChoBWgJKEsCSwBLAksES0NDGnwAZAFkAoQAfAFqAIMAZAMZAEQAgwFrBlMAcU0oTmgJKEsBSwBLAksES1NDFGcAfABdDH0BfAFkABkAkQJxBFMAcU5YBAAAAE5hbWVxT4VxUClYAgAAAC4wcVFYAQAAAGlxUoZxU2hCWAoAAAA8bGlzdGNvbXA+cVRLJEMCBgBxVSkpdHFWUnFXWCcAAABjaGVja19idWNrZXRfZXhpc3RzLjxsb2NhbHM+LjxsaXN0Y29tcD5xWFgHAAAAQnVja2V0c3FZdHFaWAwAAABsaXN0X2J1Y2tldHNxW4VxXGg+aCCGcV1oQmg2SyNDAgABcV4pKXRxX1JxYEr/////aEaHcWFScWJ9cWMoaCx9cWRYCAAAAGRlZmF1bHRzcWVOWAQAAABkaWN0cWZ9cWdYBgAAAG1vZHVsZXFoWAUAAAB1dGlsc3FpWA4AAABjbG9zdXJlX3ZhbHVlc3FqTlgIAAAAcXVhbG5hbWVxa2g2dXRSdWhlTmhmfXFsaGhoaWhqTmhraBh1dFJoFGgAKGgFaAkoSwNLAEsESwdLQ0MYdABqAWQBfAB8AXwCZAJkA40FfQN8A1MAcW0oTlgCAAAAczNxbogoWAwAAABzZXJ2aWNlX25hbWVxb1gRAAAAYXdzX2FjY2Vzc19rZXlfaWRxcFgVAAAAYXdzX3NlY3JldF9hY2Nlc3Nfa2V5cXFYDAAAAGVuZHBvaW50X3VybHFyWAYAAAB2ZXJpZnlxc3RxdHRxdVgFAAAAYm90bzNxdmgghnF3KFgNAAAAczNfYWNjZXNzX2tleXF4WA0AAABzM19zZWNyZXRfa2V5cXlYDwAAAHMzX2VuZHBvaW50X3VybHF6aCB0cXtoQmgUSwVDDAAEBgECAQIBAgEIAnF8KSl0cX1ScX5K/////2hGh3F/UnGAfXGBKGgsfXGCaHZoAWh2hXGDUnGEc2hlTk5Oh3GFaGZ9cYZoaGhpaGpOaGtoFHV0UmgWaAAoaAVoCShLBEsASwRLBUtDQzR0AHwAfAODAnMadAFkAXwAmwBkAp0DgwGCAXwDagJ0A2oEfAGDAXwAfAJkA40DAQBkAFMAcYcoTlgHAAAAQnVja2V0IHGIWA8AAAAgZG9lcyBub3QgZXhpc3RxiWg0aDFoModxinRxiyhoNmg3WAoAAABwdXRfb2JqZWN0cYxoO1gFAAAAZHVtcHNxjXRxjihoPmg6aD9oIHRxj2hCaBZLEUMKAAEKARACDAECAXGQKSl0cZFScZJK/////2hGh3GTUnGUfXGVKGgsfXGWKGg7aExoNmhidWhlTmhmfXGXaGhoaWhqTmhraBZ1dFJoF1gPAAAAb3BmLWRhdGFjYXRhbG9ncZhoGmgBWAUAAABudW1weXGZhXGaUnGbdWhlTmhmfXGcaGhYCAAAAF9fbWFpbl9fcZ1oak5oa2gkdXRSLg==''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Generate
          random search point'', description='''')\n_parser.add_argument(\"--iter-val\",
          dest=\"iter_val\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = generate_random_search_point(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "iter_val", "type": "Integer"}], "name": "Generate random search
          point", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"iter_val": "2"}'}
  - name: generate-random-search-point-4
    container:
      args: [--iter-val, '3', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        generate_random_search_point = pickle.loads(base64.b64decode(b'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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Generate random search point', description='')
        _parser.add_argument("--iter-val", dest="iter_val", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = generate_random_search_point(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      parameters:
      - name: generate-random-search-point-4-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: generate-random-search-point-4-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--iter-val", {"inputValue": "iter_val"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ngenerate_random_search_point = pickle.loads(base64.b64decode(b''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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Generate
          random search point'', description='''')\n_parser.add_argument(\"--iter-val\",
          dest=\"iter_val\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = generate_random_search_point(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "iter_val", "type": "Integer"}], "name": "Generate random search
          point", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"iter_val": "3"}'}
  - name: generate-random-search-point-5
    container:
      args: [--iter-val, '4', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        generate_random_search_point = pickle.loads(base64.b64decode(b'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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Generate random search point', description='')
        _parser.add_argument("--iter-val", dest="iter_val", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = generate_random_search_point(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      parameters:
      - name: generate-random-search-point-5-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: generate-random-search-point-5-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--iter-val", {"inputValue": "iter_val"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ngenerate_random_search_point = pickle.loads(base64.b64decode(b''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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Generate
          random search point'', description='''')\n_parser.add_argument(\"--iter-val\",
          dest=\"iter_val\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = generate_random_search_point(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "iter_val", "type": "Integer"}], "name": "Generate random search
          point", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"iter_val": "4"}'}
  - name: generate-random-search-point-6
    container:
      args: [--iter-val, '5', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        generate_random_search_point = pickle.loads(base64.b64decode(b'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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Generate random search point', description='')
        _parser.add_argument("--iter-val", dest="iter_val", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = generate_random_search_point(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      parameters:
      - name: generate-random-search-point-6-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: generate-random-search-point-6-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--iter-val", {"inputValue": "iter_val"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ngenerate_random_search_point = pickle.loads(base64.b64decode(b''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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Generate
          random search point'', description='''')\n_parser.add_argument(\"--iter-val\",
          dest=\"iter_val\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = generate_random_search_point(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "iter_val", "type": "Integer"}], "name": "Generate random search
          point", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"iter_val": "5"}'}
  - name: generate-random-search-point-7
    container:
      args: [--iter-val, '6', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        generate_random_search_point = pickle.loads(base64.b64decode(b'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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Generate random search point', description='')
        _parser.add_argument("--iter-val", dest="iter_val", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = generate_random_search_point(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      parameters:
      - name: generate-random-search-point-7-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: generate-random-search-point-7-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--iter-val", {"inputValue": "iter_val"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ngenerate_random_search_point = pickle.loads(base64.b64decode(b''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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Generate
          random search point'', description='''')\n_parser.add_argument(\"--iter-val\",
          dest=\"iter_val\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = generate_random_search_point(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "iter_val", "type": "Integer"}], "name": "Generate random search
          point", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"iter_val": "6"}'}
  - name: generate-random-search-point-8
    container:
      args: [--iter-val, '7', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        generate_random_search_point = pickle.loads(base64.b64decode(b'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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Generate random search point', description='')
        _parser.add_argument("--iter-val", dest="iter_val", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = generate_random_search_point(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      parameters:
      - name: generate-random-search-point-8-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: generate-random-search-point-8-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--iter-val", {"inputValue": "iter_val"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ngenerate_random_search_point = pickle.loads(base64.b64decode(b''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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Generate
          random search point'', description='''')\n_parser.add_argument(\"--iter-val\",
          dest=\"iter_val\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = generate_random_search_point(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "iter_val", "type": "Integer"}], "name": "Generate random search
          point", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"iter_val": "7"}'}
  - name: generate-random-search-point-9
    container:
      args: [--iter-val, '8', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        generate_random_search_point = pickle.loads(base64.b64decode(b'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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Generate random search point', description='')
        _parser.add_argument("--iter-val", dest="iter_val", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = generate_random_search_point(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      parameters:
      - name: generate-random-search-point-9-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: generate-random-search-point-9-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--iter-val", {"inputValue": "iter_val"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ngenerate_random_search_point = pickle.loads(base64.b64decode(b''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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Generate
          random search point'', description='''')\n_parser.add_argument(\"--iter-val\",
          dest=\"iter_val\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = generate_random_search_point(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "iter_val", "type": "Integer"}], "name": "Generate random search
          point", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"iter_val": "8"}'}
  - name: print-gen-val
    container:
      args: [--iter-val, '10', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        print_gen_val = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCl9tYWtlX3NrZWxfZnVuYwpxAWNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfYnVpbHRpbl90eXBlCnECWAgAAABDb2RlVHlwZXEDhXEEUnEFKEsBSwBLBEsFS0NDRnQAgwB9AXg6dAF8AIMBRABdLn0CdAJ0A2QBfAKbAJ0CfAGDA30DdAR8AoMBAQB0BHwDgwEBAHQEZAKDAQEAcRBXAHwAUwBxBk5YBgAAAHNjb3JlX3EHWAsAAAAtLS0tLS0tLS0tLXEIh3EJKFgKAAAAZ2V0X2NsaWVudHEKWAUAAAByYW5nZXELWA8AAAByZWFkX2Zyb21fc3RvcmVxDFgLAAAAYnVja2V0X25hbWVxDVgFAAAAcHJpbnRxDnRxDyhYCAAAAGl0ZXJfdmFscRBYBgAAAGNsaWVudHERWAEAAABpcRJYBAAAAGNvbmZxE3RxFFghAAAAaHlwZXJwYXJhbV9zZXF1ZW50aWFsX3BpcGVsaW5lLnB5cRVYDQAAAHByaW50X2dlbl92YWxxFktpQw4AAQYCDgESAQgBCAEMAnEXKSl0cRhScRlK/////31xGodxG1JxHH1xHShYBwAAAGdsb2JhbHNxHn1xHyhoDGgAKGgBaAUoSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHEgKE5YBwAAAEJ1Y2tldCBxIVgPAAAAIGRvZXMgbm90IGV4aXN0cSJYBgAAAEJ1Y2tldHEjWAMAAABLZXlxJIZxJVgEAAAAQm9keXEmdHEnKFgTAAAAY2hlY2tfYnVja2V0X2V4aXN0c3EoWAoAAABWYWx1ZUVycm9ycSlYCgAAAGdldF9vYmplY3RxKlgLAAAAX3Jhd19zdHJlYW1xK1gEAAAAZGF0YXEsWAYAAABwaWNrbGVxLVgFAAAAbG9hZHNxLnRxLyhYBgAAAGJ1Y2tldHEwWAMAAABrZXlxMWgRWAgAAAByYXdfZGF0YXEydHEzWCsAAAAvaG9tZS9zYW5qYXkva3ViZWZsb3dfdXNlY2FzZXMvQ2g0L3V0aWxzLnB5cTRoDEsaQwoAAQoBEAIGARACcTUpKXRxNlJxN0r/////fXE4h3E5UnE6fXE7KGgefXE8KGgtY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxPWgthXE+UnE/aChoAChoAWgFKEsCSwBLAksES0NDGnwAZAFkAoQAfAFqAIMAZAMZAEQAgwFrBlMAcUAoTmgFKEsBSwBLAksES1NDFGcAfABdDH0BfAFkABkAkQJxBFMAcUFYBAAAAE5hbWVxQoVxQylYAgAAAC4wcURoEoZxRWg0WAoAAAA8bGlzdGNvbXA+cUZLJEMCBgBxRykpdHFIUnFJWCcAAABjaGVja19idWNrZXRfZXhpc3RzLjxsb2NhbHM+LjxsaXN0Y29tcD5xSlgHAAAAQnVja2V0c3FLdHFMWAwAAABsaXN0X2J1Y2tldHNxTYVxTmgwaBGGcU9oNGgoSyNDAgABcVApKXRxUVJxUkr/////aDiHcVNScVR9cVUoaB59cVZYCAAAAGRlZmF1bHRzcVdOWAQAAABkaWN0cVh9cVlYBgAAAG1vZHVsZXFaWAUAAAB1dGlsc3FbWA4AAABjbG9zdXJlX3ZhbHVlc3FcTlgIAAAAcXVhbG5hbWVxXWgodXRSdWhXTmhYfXFeaFpoW2hcTmhdaAx1dFJoCmgAKGgBaAUoSwNLAEsESwdLQ0MYdABqAWQBfAB8AXwCZAJkA40FfQN8A1MAcV8oTlgCAAAAczNxYIgoWAwAAABzZXJ2aWNlX25hbWVxYVgRAAAAYXdzX2FjY2Vzc19rZXlfaWRxYlgVAAAAYXdzX3NlY3JldF9hY2Nlc3Nfa2V5cWNYDAAAAGVuZHBvaW50X3VybHFkWAYAAAB2ZXJpZnlxZXRxZnRxZ1gFAAAAYm90bzNxaGgRhnFpKFgNAAAAczNfYWNjZXNzX2tleXFqWA0AAABzM19zZWNyZXRfa2V5cWtYDwAAAHMzX2VuZHBvaW50X3VybHFsaBF0cW1oNGgKSwVDDAAEBgECAQIBAgEIAnFuKSl0cW9ScXBK/////2g4h3FxUnFyfXFzKGgefXF0aGhoPWhohXF1UnF2c2hXTk5Oh3F3aFh9cXhoWmhbaFxOaF1oCnV0UmgNWA8AAABvcGYtZGF0YWNhdGFsb2dxeXVoV05oWH1xemhaWAgAAABfX21haW5fX3F7aFxOaF1oFnV0Ui4='))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Print gen val', description='')
        _parser.add_argument("--iter-val", dest="iter_val", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = print_gen_val(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    outputs:
      artifacts:
      - {name: print-gen-val-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--iter-val", {"inputValue": "iter_val"}, "----output-paths",
          {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\nprint_gen_val = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCl9tYWtlX3NrZWxfZnVuYwpxAWNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfYnVpbHRpbl90eXBlCnECWAgAAABDb2RlVHlwZXEDhXEEUnEFKEsBSwBLBEsFS0NDRnQAgwB9AXg6dAF8AIMBRABdLn0CdAJ0A2QBfAKbAJ0CfAGDA30DdAR8AoMBAQB0BHwDgwEBAHQEZAKDAQEAcRBXAHwAUwBxBk5YBgAAAHNjb3JlX3EHWAsAAAAtLS0tLS0tLS0tLXEIh3EJKFgKAAAAZ2V0X2NsaWVudHEKWAUAAAByYW5nZXELWA8AAAByZWFkX2Zyb21fc3RvcmVxDFgLAAAAYnVja2V0X25hbWVxDVgFAAAAcHJpbnRxDnRxDyhYCAAAAGl0ZXJfdmFscRBYBgAAAGNsaWVudHERWAEAAABpcRJYBAAAAGNvbmZxE3RxFFghAAAAaHlwZXJwYXJhbV9zZXF1ZW50aWFsX3BpcGVsaW5lLnB5cRVYDQAAAHByaW50X2dlbl92YWxxFktpQw4AAQYCDgESAQgBCAEMAnEXKSl0cRhScRlK/////31xGodxG1JxHH1xHShYBwAAAGdsb2JhbHNxHn1xHyhoDGgAKGgBaAUoSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHEgKE5YBwAAAEJ1Y2tldCBxIVgPAAAAIGRvZXMgbm90IGV4aXN0cSJYBgAAAEJ1Y2tldHEjWAMAAABLZXlxJIZxJVgEAAAAQm9keXEmdHEnKFgTAAAAY2hlY2tfYnVja2V0X2V4aXN0c3EoWAoAAABWYWx1ZUVycm9ycSlYCgAAAGdldF9vYmplY3RxKlgLAAAAX3Jhd19zdHJlYW1xK1gEAAAAZGF0YXEsWAYAAABwaWNrbGVxLVgFAAAAbG9hZHNxLnRxLyhYBgAAAGJ1Y2tldHEwWAMAAABrZXlxMWgRWAgAAAByYXdfZGF0YXEydHEzWCsAAAAvaG9tZS9zYW5qYXkva3ViZWZsb3dfdXNlY2FzZXMvQ2g0L3V0aWxzLnB5cTRoDEsaQwoAAQoBEAIGARACcTUpKXRxNlJxN0r/////fXE4h3E5UnE6fXE7KGgefXE8KGgtY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxPWgthXE+UnE/aChoAChoAWgFKEsCSwBLAksES0NDGnwAZAFkAoQAfAFqAIMAZAMZAEQAgwFrBlMAcUAoTmgFKEsBSwBLAksES1NDFGcAfABdDH0BfAFkABkAkQJxBFMAcUFYBAAAAE5hbWVxQoVxQylYAgAAAC4wcURoEoZxRWg0WAoAAAA8bGlzdGNvbXA+cUZLJEMCBgBxRykpdHFIUnFJWCcAAABjaGVja19idWNrZXRfZXhpc3RzLjxsb2NhbHM+LjxsaXN0Y29tcD5xSlgHAAAAQnVja2V0c3FLdHFMWAwAAABsaXN0X2J1Y2tldHNxTYVxTmgwaBGGcU9oNGgoSyNDAgABcVApKXRxUVJxUkr/////aDiHcVNScVR9cVUoaB59cVZYCAAAAGRlZmF1bHRzcVdOWAQAAABkaWN0cVh9cVlYBgAAAG1vZHVsZXFaWAUAAAB1dGlsc3FbWA4AAABjbG9zdXJlX3ZhbHVlc3FcTlgIAAAAcXVhbG5hbWVxXWgodXRSdWhXTmhYfXFeaFpoW2hcTmhdaAx1dFJoCmgAKGgBaAUoSwNLAEsESwdLQ0MYdABqAWQBfAB8AXwCZAJkA40FfQN8A1MAcV8oTlgCAAAAczNxYIgoWAwAAABzZXJ2aWNlX25hbWVxYVgRAAAAYXdzX2FjY2Vzc19rZXlfaWRxYlgVAAAAYXdzX3NlY3JldF9hY2Nlc3Nfa2V5cWNYDAAAAGVuZHBvaW50X3VybHFkWAYAAAB2ZXJpZnlxZXRxZnRxZ1gFAAAAYm90bzNxaGgRhnFpKFgNAAAAczNfYWNjZXNzX2tleXFqWA0AAABzM19zZWNyZXRfa2V5cWtYDwAAAHMzX2VuZHBvaW50X3VybHFsaBF0cW1oNGgKSwVDDAAEBgECAQIBAgEIAnFuKSl0cW9ScXBK/////2g4h3FxUnFyfXFzKGgefXF0aGhoPWhohXF1UnF2c2hXTk5Oh3F3aFh9cXhoWmhbaFxOaF1oCnV0UmgNWA8AAABvcGYtZGF0YWNhdGFsb2dxeXVoV05oWH1xemhaWAgAAABfX21haW5fX3F7aFxOaF1oFnV0Ui4=''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Print
          gen val'', description='''')\n_parser.add_argument(\"--iter-val\", dest=\"iter_val\",
          type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = print_gen_val(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "iter_val", "type": "Integer"}], "name": "Print gen val", "outputs":
          [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"iter_val": "10"}'}
  - name: train-model
    container:
      args: [--hyperparam-idx, '0', --retcode-genpoint, '{{inputs.parameters.generate-random-search-point-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        train_model = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Train model', description='Look up hyperparams from store')
        _parser.add_argument("--hyperparam-idx", dest="hyperparam_idx", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--retcode-genpoint", dest="retcode_genpoint", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = train_model(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    inputs:
      parameters:
      - {name: generate-random-search-point-Output}
    outputs:
      artifacts:
      - {name: train-model-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Look
          up hyperparams from store", "implementation": {"container": {"args": ["--hyperparam-idx",
          {"inputValue": "hyperparam_idx"}, "--retcode-genpoint", {"inputValue": "retcode_genpoint"},
          "----output-paths", {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ntrain_model = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Train
          model'', description=''Look up hyperparams from store'')\n_parser.add_argument(\"--hyperparam-idx\",
          dest=\"hyperparam_idx\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--retcode-genpoint\",
          dest=\"retcode_genpoint\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_model(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "hyperparam_idx", "type": "Integer"}, {"name": "retcode_genpoint",
          "type": "Integer"}], "name": "Train model", "outputs": [{"name": "Output",
          "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"hyperparam_idx":
          "0", "retcode_genpoint": "{{inputs.parameters.generate-random-search-point-Output}}"}'}
  - name: train-model-10
    container:
      args: [--hyperparam-idx, '9', --retcode-genpoint, '{{inputs.parameters.generate-random-search-point-10-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        train_model = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Train model', description='Look up hyperparams from store')
        _parser.add_argument("--hyperparam-idx", dest="hyperparam_idx", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--retcode-genpoint", dest="retcode_genpoint", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = train_model(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    inputs:
      parameters:
      - {name: generate-random-search-point-10-Output}
    outputs:
      artifacts:
      - {name: train-model-10-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Look
          up hyperparams from store", "implementation": {"container": {"args": ["--hyperparam-idx",
          {"inputValue": "hyperparam_idx"}, "--retcode-genpoint", {"inputValue": "retcode_genpoint"},
          "----output-paths", {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ntrain_model = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Train
          model'', description=''Look up hyperparams from store'')\n_parser.add_argument(\"--hyperparam-idx\",
          dest=\"hyperparam_idx\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--retcode-genpoint\",
          dest=\"retcode_genpoint\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_model(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "hyperparam_idx", "type": "Integer"}, {"name": "retcode_genpoint",
          "type": "Integer"}], "name": "Train model", "outputs": [{"name": "Output",
          "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"hyperparam_idx":
          "9", "retcode_genpoint": "{{inputs.parameters.generate-random-search-point-10-Output}}"}'}
  - name: train-model-2
    container:
      args: [--hyperparam-idx, '1', --retcode-genpoint, '{{inputs.parameters.generate-random-search-point-2-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        train_model = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Train model', description='Look up hyperparams from store')
        _parser.add_argument("--hyperparam-idx", dest="hyperparam_idx", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--retcode-genpoint", dest="retcode_genpoint", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = train_model(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    inputs:
      parameters:
      - {name: generate-random-search-point-2-Output}
    outputs:
      artifacts:
      - {name: train-model-2-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Look
          up hyperparams from store", "implementation": {"container": {"args": ["--hyperparam-idx",
          {"inputValue": "hyperparam_idx"}, "--retcode-genpoint", {"inputValue": "retcode_genpoint"},
          "----output-paths", {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ntrain_model = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgTAAAAY2hlY2tfYnVja2V0X2V4aXN0c3F8WAoAAABWYWx1ZUVycm9ycX1YCgAAAGdldF9vYmplY3RxflgLAAAAX3Jhd19zdHJlYW1xf1gEAAAAZGF0YXGAWAYAAABwaWNrbGVxgVgFAAAAbG9hZHNxgnRxgyhYBgAAAGJ1Y2tldHGEWAMAAABrZXlxhWhiWAgAAAByYXdfZGF0YXGGdHGHWCsAAAAvaG9tZS9zYW5qYXkva3ViZWZsb3dfdXNlY2FzZXMvQ2g0L3V0aWxzLnB5cYhoS0saQwoAAQoBEAIGARACcYkpKXRxilJxi0r/////fXGMh3GNUnGOfXGPKGhyfXGQKGiBaAFogYVxkVJxkmh8aAAoaAtoDyhLAksASwJLBEtDQxp8AGQBZAKEAHwBagCDAGQDGQBEAIMBawZTAHGTKE5oDyhLAUsASwJLBEtTQxRnAHwAXQx9AXwBZAAZAJECcQRTAHGUWAQAAABOYW1lcZWFcZYpWAIAAAAuMHGXWAEAAABpcZiGcZloiFgKAAAAPGxpc3Rjb21wPnGaSyRDAgYAcZspKXRxnFJxnVgnAAAAY2hlY2tfYnVja2V0X2V4aXN0cy48bG9jYWxzPi48bGlzdGNvbXA+cZ5YBwAAAEJ1Y2tldHNxn3RxoFgMAAAAbGlzdF9idWNrZXRzcaGFcaJohGhihnGjaIhofEsjQwIAAXGkKSl0caVScaZK/////2iMh3GnUnGofXGpKGhyfXGqWAgAAABkZWZhdWx0c3GrTlgEAAAAZGljdHGsfXGtWAYAAABtb2R1bGVxrlgFAAAAdXRpbHNxr1gOAAAAY2xvc3VyZV92YWx1ZXNxsE5YCAAAAHF1YWxuYW1lcbFofHV0UnVoq05orH1xsmiuaK9osE5osWhLdXRSaEloAChoC2gPKEsDSwBLBEsHS0NDGHQAagFkAXwAfAF8AmQCZAONBX0DfANTAHGzKE5YAgAAAHMzcbSIKFgMAAAAc2VydmljZV9uYW1lcbVYEQAAAGF3c19hY2Nlc3Nfa2V5X2lkcbZYFQAAAGF3c19zZWNyZXRfYWNjZXNzX2tleXG3WAwAAABlbmRwb2ludF91cmxxuFgGAAAAdmVyaWZ5cbl0cbp0cbtYBQAAAGJvdG8zcbxoYoZxvShYDQAAAHMzX2FjY2Vzc19rZXlxvlgNAAAAczNfc2VjcmV0X2tleXG/WA8AAABzM19lbmRwb2ludF91cmxxwGhidHHBaIhoSUsFQwwABAYBAgECAQIBCAJxwikpdHHDUnHESv////9ojIdxxVJxxn1xxyhocn1xyGi8aAFovIVxyVJxynNoq05OTodxy2isfXHMaK5or2iwTmixaEl1dFJoXWgAKGgLaA8oSwRLAEsESwVLQ0M0dAB8AHwDgwJzGnQBZAF8AJsAZAKdA4MBggF8A2oCdANqBHwBgwF8AHwCZAONAwEAZABTAHHNKE5YBwAAAEJ1Y2tldCBxzlgPAAAAIGRvZXMgbm90IGV4aXN0cc9oemh3aHiHcdB0cdEoaHxofVgKAAAAcHV0X29iamVjdHHSaIFYBQAAAGR1bXBzcdN0cdQoaIRogGiFaGJ0cdVoiGhdSxFDCgABCgEQAgwBAgFx1ikpdHHXUnHYSv////9ojIdx2VJx2n1x2yhocn1x3ChogWiSaHxoqHVoq05orH1x3WiuaK9osE5osWhddXRSaExYDwAAAG9wZi1kYXRhY2F0YWxvZ3HeaFNjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX3JlaHlkcmF0ZV9za2VsZXRvbl9jbGFzcwpx3yhjYnVpbHRpbnMKdHlwZQpx4GhTY3RvcmNoLm5uLm1vZHVsZXMubW9kdWxlCk1vZHVsZQpx4YVx4n1x41gHAAAAX19kb2NfX3HkTnOHceVSceZ9cecoWAoAAABfX21vZHVsZV9fcehYCAAAAF9fbWFpbl9fcelYCAAAAF9faW5pdF9fcepoAChoC2gPKEsHSwBLCEsFSwNDknQAdAF8AIMCagKDAAEAdANqBIMAfABfBXhCdAZ8BIMBRABdNn0HfAdkAWsCckR8AGoFagd0A2oIfAF8A4MCgwEBAHEifABqBWoHdANqCHwDfAODAoMBAQBxIlcAfARkAWsCcnR0A2oIfAF8AoMCfABfCW4OdANqCHwDfAKDAnwAXwl8BXwAXwp8BnwAXwtkAFMAcetOSwCGcewoWAUAAABzdXBlcnHtaFNo6mhQWAoAAABNb2R1bGVMaXN0ce5YCgAAAGxheWVyX2xpc3Rx72hZWAYAAABhcHBlbmRx8FgGAAAATGluZWFycfFYDAAAAG91dHB1dF9sYXllcnHyaB5oJXRx8yhYBAAAAHNlbGZx9GghaCJoI2gkaB5oJWiYdHH1aDZo6ksjQxYAAQ4CCgIOAQgBFgIYAggBEAIOAgYBcfZYCQAAAF9fY2xhc3NfX3H3hXH4KXRx+VJx+ksBaG6HcftScfx9cf0oaHJ9cf4oaFNo5mhQaAd1aKsoSwJLAUsKSwFjdG9yY2gubm4ubW9kdWxlcy5hY3RpdmF0aW9uClJlTFUKcf8pgXIAAQAAfXIBAQAAKFgIAAAAdHJhaW5pbmdyAgEAAIhYCwAAAF9wYXJhbWV0ZXJzcgMBAABjY29sbGVjdGlvbnMKT3JkZXJlZERpY3QKcgQBAAApUnIFAQAAWAgAAABfYnVmZmVyc3IGAQAAagQBAAApUnIHAQAAWBsAAABfbm9uX3BlcnNpc3RlbnRfYnVmZmVyc19zZXRyCAEAAGNidWlsdGlucwpzZXQKcgkBAABdcgoBAACFcgsBAABScgwBAABYDwAAAF9iYWNrd2FyZF9ob29rc3INAQAAagQBAAApUnIOAQAAWBYAAABfaXNfZnVsbF9iYWNrd2FyZF9ob29rcg8BAABOWA4AAABfZm9yd2FyZF9ob29rc3IQAQAAagQBAAApUnIRAQAAWBIAAABfZm9yd2FyZF9wcmVfaG9va3NyEgEAAGoEAQAAKVJyEwEAAFgRAAAAX3N0YXRlX2RpY3RfaG9va3NyFAEAAGoEAQAAKVJyFQEAAFgaAAAAX2xvYWRfc3RhdGVfZGljdF9wcmVfaG9va3NyFgEAAGoEAQAAKVJyFwEAAFgIAAAAX21vZHVsZXNyGAEAAGoEAQAAKVJyGQEAAFgHAAAAaW5wbGFjZXIaAQAAiXViTnRyGwEAAGisfXIcAQAAaK5o6WiwXXIdAQAAaOZhaLFYDAAAAE5ldC5fX2luaXRfX3IeAQAAdXRSWAcAAABmb3J3YXJkch8BAABoAChoC2gPKEsCSwBLBEsES0NDRHwBfQJ4HHwAagBEAF0SfQN8AGoBfAN8AoMBgwF9AnEMVwB8AGoCfAKDAX0CfABqA2QAawlyQHwAagN8AoMBfQJ8AlMAciABAABOhXIhAQAAKGjvaB5o8mgldHIiAQAAKGj0WAEAAAB4ciMBAABoM1gFAAAAbGF5ZXJyJAEAAHRyJQEAAGg2ah8BAABLNkMOAAEEAgwBEgIKAQoBCgJyJgEAACkpdHInAQAAUnIoAQAASv////9obodyKQEAAFJyKgEAAH1yKwEAAChocn1yLAEAAGirTmisfXItAQAAaK5o6WiwTmixWAsAAABOZXQuZm9yd2FyZHIuAQAAdXRSdXRSaEVoAWhFhXIvAQAAUnIwAQAAaFBoB3Voq05orH1yMQEAAGiuaOlosE5osWhpdXRSLg==''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Train
          model'', description=''Look up hyperparams from store'')\n_parser.add_argument(\"--hyperparam-idx\",
          dest=\"hyperparam_idx\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--retcode-genpoint\",
          dest=\"retcode_genpoint\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_model(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "hyperparam_idx", "type": "Integer"}, {"name": "retcode_genpoint",
          "type": "Integer"}], "name": "Train model", "outputs": [{"name": "Output",
          "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"hyperparam_idx":
          "1", "retcode_genpoint": "{{inputs.parameters.generate-random-search-point-2-Output}}"}'}
  - name: train-model-3
    container:
      args: [--hyperparam-idx, '2', --retcode-genpoint, '{{inputs.parameters.generate-random-search-point-3-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        train_model = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Train model', description='Look up hyperparams from store')
        _parser.add_argument("--hyperparam-idx", dest="hyperparam_idx", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--retcode-genpoint", dest="retcode_genpoint", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = train_model(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    inputs:
      parameters:
      - {name: generate-random-search-point-3-Output}
    outputs:
      artifacts:
      - {name: train-model-3-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Look
          up hyperparams from store", "implementation": {"container": {"args": ["--hyperparam-idx",
          {"inputValue": "hyperparam_idx"}, "--retcode-genpoint", {"inputValue": "retcode_genpoint"},
          "----output-paths", {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ntrain_model = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Train
          model'', description=''Look up hyperparams from store'')\n_parser.add_argument(\"--hyperparam-idx\",
          dest=\"hyperparam_idx\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--retcode-genpoint\",
          dest=\"retcode_genpoint\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_model(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "hyperparam_idx", "type": "Integer"}, {"name": "retcode_genpoint",
          "type": "Integer"}], "name": "Train model", "outputs": [{"name": "Output",
          "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"hyperparam_idx":
          "2", "retcode_genpoint": "{{inputs.parameters.generate-random-search-point-3-Output}}"}'}
  - name: train-model-4
    container:
      args: [--hyperparam-idx, '3', --retcode-genpoint, '{{inputs.parameters.generate-random-search-point-4-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        train_model = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Train model', description='Look up hyperparams from store')
        _parser.add_argument("--hyperparam-idx", dest="hyperparam_idx", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--retcode-genpoint", dest="retcode_genpoint", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = train_model(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    inputs:
      parameters:
      - {name: generate-random-search-point-4-Output}
    outputs:
      artifacts:
      - {name: train-model-4-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Look
          up hyperparams from store", "implementation": {"container": {"args": ["--hyperparam-idx",
          {"inputValue": "hyperparam_idx"}, "--retcode-genpoint", {"inputValue": "retcode_genpoint"},
          "----output-paths", {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ntrain_model = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Train
          model'', description=''Look up hyperparams from store'')\n_parser.add_argument(\"--hyperparam-idx\",
          dest=\"hyperparam_idx\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--retcode-genpoint\",
          dest=\"retcode_genpoint\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_model(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "hyperparam_idx", "type": "Integer"}, {"name": "retcode_genpoint",
          "type": "Integer"}], "name": "Train model", "outputs": [{"name": "Output",
          "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"hyperparam_idx":
          "3", "retcode_genpoint": "{{inputs.parameters.generate-random-search-point-4-Output}}"}'}
  - name: train-model-5
    container:
      args: [--hyperparam-idx, '4', --retcode-genpoint, '{{inputs.parameters.generate-random-search-point-5-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        train_model = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Train model', description='Look up hyperparams from store')
        _parser.add_argument("--hyperparam-idx", dest="hyperparam_idx", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--retcode-genpoint", dest="retcode_genpoint", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = train_model(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    inputs:
      parameters:
      - {name: generate-random-search-point-5-Output}
    outputs:
      artifacts:
      - {name: train-model-5-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Look
          up hyperparams from store", "implementation": {"container": {"args": ["--hyperparam-idx",
          {"inputValue": "hyperparam_idx"}, "--retcode-genpoint", {"inputValue": "retcode_genpoint"},
          "----output-paths", {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ntrain_model = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Train
          model'', description=''Look up hyperparams from store'')\n_parser.add_argument(\"--hyperparam-idx\",
          dest=\"hyperparam_idx\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--retcode-genpoint\",
          dest=\"retcode_genpoint\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_model(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "hyperparam_idx", "type": "Integer"}, {"name": "retcode_genpoint",
          "type": "Integer"}], "name": "Train model", "outputs": [{"name": "Output",
          "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"hyperparam_idx":
          "4", "retcode_genpoint": "{{inputs.parameters.generate-random-search-point-5-Output}}"}'}
  - name: train-model-6
    container:
      args: [--hyperparam-idx, '5', --retcode-genpoint, '{{inputs.parameters.generate-random-search-point-6-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        train_model = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Train model', description='Look up hyperparams from store')
        _parser.add_argument("--hyperparam-idx", dest="hyperparam_idx", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--retcode-genpoint", dest="retcode_genpoint", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = train_model(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    inputs:
      parameters:
      - {name: generate-random-search-point-6-Output}
    outputs:
      artifacts:
      - {name: train-model-6-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Look
          up hyperparams from store", "implementation": {"container": {"args": ["--hyperparam-idx",
          {"inputValue": "hyperparam_idx"}, "--retcode-genpoint", {"inputValue": "retcode_genpoint"},
          "----output-paths", {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ntrain_model = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Train
          model'', description=''Look up hyperparams from store'')\n_parser.add_argument(\"--hyperparam-idx\",
          dest=\"hyperparam_idx\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--retcode-genpoint\",
          dest=\"retcode_genpoint\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_model(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "hyperparam_idx", "type": "Integer"}, {"name": "retcode_genpoint",
          "type": "Integer"}], "name": "Train model", "outputs": [{"name": "Output",
          "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"hyperparam_idx":
          "5", "retcode_genpoint": "{{inputs.parameters.generate-random-search-point-6-Output}}"}'}
  - name: train-model-7
    container:
      args: [--hyperparam-idx, '6', --retcode-genpoint, '{{inputs.parameters.generate-random-search-point-7-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        train_model = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Train model', description='Look up hyperparams from store')
        _parser.add_argument("--hyperparam-idx", dest="hyperparam_idx", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--retcode-genpoint", dest="retcode_genpoint", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = train_model(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    inputs:
      parameters:
      - {name: generate-random-search-point-7-Output}
    outputs:
      artifacts:
      - {name: train-model-7-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Look
          up hyperparams from store", "implementation": {"container": {"args": ["--hyperparam-idx",
          {"inputValue": "hyperparam_idx"}, "--retcode-genpoint", {"inputValue": "retcode_genpoint"},
          "----output-paths", {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ntrain_model = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Train
          model'', description=''Look up hyperparams from store'')\n_parser.add_argument(\"--hyperparam-idx\",
          dest=\"hyperparam_idx\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--retcode-genpoint\",
          dest=\"retcode_genpoint\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_model(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "hyperparam_idx", "type": "Integer"}, {"name": "retcode_genpoint",
          "type": "Integer"}], "name": "Train model", "outputs": [{"name": "Output",
          "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"hyperparam_idx":
          "6", "retcode_genpoint": "{{inputs.parameters.generate-random-search-point-7-Output}}"}'}
  - name: train-model-8
    container:
      args: [--hyperparam-idx, '7', --retcode-genpoint, '{{inputs.parameters.generate-random-search-point-8-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        train_model = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Train model', description='Look up hyperparams from store')
        _parser.add_argument("--hyperparam-idx", dest="hyperparam_idx", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--retcode-genpoint", dest="retcode_genpoint", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = train_model(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    inputs:
      parameters:
      - {name: generate-random-search-point-8-Output}
    outputs:
      artifacts:
      - {name: train-model-8-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Look
          up hyperparams from store", "implementation": {"container": {"args": ["--hyperparam-idx",
          {"inputValue": "hyperparam_idx"}, "--retcode-genpoint", {"inputValue": "retcode_genpoint"},
          "----output-paths", {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ntrain_model = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Train
          model'', description=''Look up hyperparams from store'')\n_parser.add_argument(\"--hyperparam-idx\",
          dest=\"hyperparam_idx\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--retcode-genpoint\",
          dest=\"retcode_genpoint\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_model(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "hyperparam_idx", "type": "Integer"}, {"name": "retcode_genpoint",
          "type": "Integer"}], "name": "Train model", "outputs": [{"name": "Output",
          "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"hyperparam_idx":
          "7", "retcode_genpoint": "{{inputs.parameters.generate-random-search-point-8-Output}}"}'}
  - name: train-model-9
    container:
      args: [--hyperparam-idx, '8', --retcode-genpoint, '{{inputs.parameters.generate-random-search-point-9-Output}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'boto3' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        echo -n "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        import sys
        try:
            import cloudpickle as _cloudpickle
        except ImportError:
            import subprocess
            try:
                print("cloudpickle is not installed. Installing it globally", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle globally", file=sys.stderr)
            except:
                print("Failed to install cloudpickle globally. Installing for the current user.", file=sys.stderr)
                subprocess.run([sys.executable, "-m", "pip", "install", "cloudpickle==1.1.1", "--user", "--quiet"], env={"PIP_DISABLE_PIP_VERSION_CHECK": "1"}, check=True)
                print("Installed cloudpickle for the current user", file=sys.stderr)
                # Enable loading from user-installed package directory. Python does not add it to sys.path if it was empty at start. Running pip does not refresh `sys.path`.
                import site
                sys.path.append(site.getusersitepackages())
            import cloudpickle as _cloudpickle
            print("cloudpickle loaded successfully after installing.", file=sys.stderr)

        pickler_python_version = (3, 6, 7, 'final', 0)
        current_python_version = tuple(sys.version_info)
        if (
            current_python_version[0] != pickler_python_version[0] or
            current_python_version[1] < pickler_python_version[1] or
            current_python_version[0] == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1] < 6))
            ):
            raise RuntimeError("Incompatible python versions: " + str(current_python_version) + " instead of " + str(pickler_python_version))

        if current_python_version != pickler_python_version:
            print("Warning!: Different python versions. The code may crash! Current environment python version: " + str(current_python_version) + ". Component code python version: " + str(pickler_python_version), file=sys.stderr)

        import base64
        import pickle

        train_model = pickle.loads(base64.b64decode(b'gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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'))

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Train model', description='Look up hyperparams from store')
        _parser.add_argument("--hyperparam-idx", dest="hyperparam_idx", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--retcode-genpoint", dest="retcode_genpoint", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = train_model(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime
    inputs:
      parameters:
      - {name: generate-random-search-point-9-Output}
    outputs:
      artifacts:
      - {name: train-model-9-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Look
          up hyperparams from store", "implementation": {"container": {"args": ["--hyperparam-idx",
          {"inputValue": "hyperparam_idx"}, "--retcode-genpoint", {"inputValue": "retcode_genpoint"},
          "----output-paths", {"outputPath": "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' || PIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet --no-warn-script-location ''boto3'' --user)
          && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\necho -n \"$0\"
          > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import sys\ntry:\n    import
          cloudpickle as _cloudpickle\nexcept ImportError:\n    import subprocess\n    try:\n        print(\"cloudpickle
          is not installed. Installing it globally\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--quiet\"], env={\"PIP_DISABLE_PIP_VERSION_CHECK\":
          \"1\"}, check=True)\n        print(\"Installed cloudpickle globally\", file=sys.stderr)\n    except:\n        print(\"Failed
          to install cloudpickle globally. Installing for the current user.\", file=sys.stderr)\n        subprocess.run([sys.executable,
          \"-m\", \"pip\", \"install\", \"cloudpickle==1.1.1\", \"--user\", \"--quiet\"],
          env={\"PIP_DISABLE_PIP_VERSION_CHECK\": \"1\"}, check=True)\n        print(\"Installed
          cloudpickle for the current user\", file=sys.stderr)\n        # Enable loading
          from user-installed package directory. Python does not add it to sys.path
          if it was empty at start. Running pip does not refresh `sys.path`.\n        import
          site\n        sys.path.append(site.getusersitepackages())\n    import cloudpickle
          as _cloudpickle\n    print(\"cloudpickle loaded successfully after installing.\",
          file=sys.stderr)\n\npickler_python_version = (3, 6, 7, ''final'', 0)\ncurrent_python_version
          = tuple(sys.version_info)\nif (\n    current_python_version[0] != pickler_python_version[0]
          or\n    current_python_version[1] < pickler_python_version[1] or\n    current_python_version[0]
          == 3 and ((pickler_python_version[1] < 6) != (current_python_version[1]
          < 6))\n    ):\n    raise RuntimeError(\"Incompatible python versions: \"
          + str(current_python_version) + \" instead of \" + str(pickler_python_version))\n\nif
          current_python_version != pickler_python_version:\n    print(\"Warning!:
          Different python versions. The code may crash! Current environment python
          version: \" + str(current_python_version) + \". Component code python version:
          \" + str(pickler_python_version), file=sys.stderr)\n\nimport base64\nimport
          pickle\n\ntrain_model = pickle.loads(base64.b64decode(b''gANjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2ZpbGxfZnVuY3Rpb24KcQAoY2Nsb3VkcGlja2xlLmNsb3VkcGlja2xlCnN1YmltcG9ydApxAVgKAAAAdG9yY2guY3VkYXEChXEDUnEEMGgBWAgAAAB0b3JjaC5ubnEFhXEGUnEHMGgBWAsAAAB0b3JjaC5vcHRpbXEIhXEJUnEKMGNjbG91ZHBpY2tsZS5jbG91ZHBpY2tsZQpfbWFrZV9za2VsX2Z1bmMKcQtjY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGUKX2J1aWx0aW5fdHlwZQpxDFgIAAAAQ29kZVR5cGVxDYVxDlJxDyhLAksASxdLCEsDQlwCAAB0AGoBdABqAmoDgwByEmQBbgJkAoMBiQF0BGQDiAGbAJ0CgwEBAHQFgwB9AnQAagZ0B3QIZAR8AoMDgwFqCYMAfQN0AGoGdAd0CGQFfAKDA4MBagmDAH0EdABqBnQHdAhkBnwCgwODAWoJgwB9BXQAagZ0B3QIZAd8AoMDgwFqCYMAfQZ0B3QIZAh8AJsAnQJ8AoMDfQd0CXwHagpkCWQKgwKDAX0IdAt8B2oKZAtkDIMCgwF9CXQLfAdqCmQNZA6DAoMBfQp0C3wHagpkD2QQgwKDAX0LfAdqCmQRZBKDAn0MfAxkEmsCcvR0DGoNgwB9DG4SfAxkE2sCkAFyBnQMag6DAH0MdA9kEGQOfAt8CnwMdAxqDoMAZBSNBn0NdAxqEIMAiQB0AGoRahJ8DWoTgwB8CGQVjQJ9DnwNahSDAAEAdAR8AIMBAQB0BHwHgwEBAIgBZAJrA5ABcnp8DWoViAGDAX0NfANqFYgBgwF9A3wEahWIAYMBfQR4bnQWfAmDAUQAXWJ9D3wDfRB8BH0RfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRN8D2QWFgBkF2sCkAFyzHQEZBh8D5sAZBl8E5sAnQSDAQEAfA5qGIMAAQB8E2oZgwABAHwOahqDAAEAkAFxhFcAfA18EIMBfRKIAHwSaheDAHwRaheDAIMCfRR0BGQafBSbAJ0CgwEBAIcAhwFmAmQbZByECH0VfBV8DXwFfAaDA30WdARkHXwWmwCdAoMBAQB0G3QIfBZqHIMAfAdkHpwCZB98AJsAnQJ8AoMEAQB8AFMAcRAoWDcAAABMb29rIHVwIGh5cGVycGFyYW1zIGZyb20gc3RvcmUKICAgIGFuZCB0cmFpbiBtb2RlbAogICAgcRFYBgAAAGN1ZGE6MHESWAMAAABjcHVxE1gJAAAARGV2aWNlID0gcRRYDgAAAGZlYXR1cmVzX3RyYWlucRVYDAAAAHRhcmdldF90cmFpbnEWWA0AAABmZWF0dXJlc190ZXN0cRdYCwAAAHRhcmdldF90ZXN0cRhYBQAAAGNvbmZfcRlYAgAAAGxycRpHP4R64UeuFHtYCAAAAE5fZXBvY2hzcRtNECdYEQAAAG51bV9oaWRkZW5fbGF5ZXJzcRxLAVgJAAAAbnVtX25vZGVzcR1LAlgKAAAAYWN0aXZhdGlvbnEeWAQAAAByZWx1cR9YBwAAAHNpZ21vaWRxIChYCAAAAG5faW5wdXRzcSFYCQAAAG5fb3V0cHV0c3EiWA4AAABuX2hpZGRlbl9ub2Rlc3EjWA8AAABuX2hpZGRlbl9sYXllcnNxJGgeWBEAAABvdXRwdXRfYWN0aXZhdGlvbnEldHEmaBqFcSdN6ANLAFgIAAAAZXBvY2ggPSBxKFgIAAAAIGxvc3MgPSBxKVgNAAAAVHJhaW4gTG9zcyA6IHEqaA8oSwNLAEsFSwNLE0NCfABqAIMAAQCIAWQBawNyJHwBagGIAYMBfQF8AmoBiAGDAX0CfAB8AYMBfQOIAHwDagKDAHwCagKDAIMCfQR8BFMAcStYPAAAAEV2YWx1YXRlIG1vZGVsIG9uIHRlc3Qgc2V0CiAgICAgICAgYW5kIHN0b3JlIHJlc3VsdAogICAgICAgIHEsaBOGcS1YBAAAAGV2YWxxLlgCAAAAdG9xL1gHAAAAc3F1ZWV6ZXEwh3ExKFgFAAAAbW9kZWxxMmgXaBhYAwAAAG91dHEzWAQAAABsb3NzcTR0cTVYIQAAAGh5cGVycGFyYW1fc2VxdWVudGlhbF9waXBlbGluZS5weXE2WA4AAABldmFsdWF0ZV9tb2RlbHE3S+ZDDgAECAIIAQoBCgIIARIDcThYCQAAAGNyaXRlcmlvbnE5WAYAAABkZXZpY2VxOoZxOyl0cTxScT1YIwAAAHRyYWluX21vZGVsLjxsb2NhbHM+LmV2YWx1YXRlX21vZGVscT5YDQAAAFRlc3QgIExvc3MgOiBxP1gJAAAAdGVzdF9sb3NzcUBYBAAAAGNvbmZxQYZxQlgGAAAAc2NvcmVfcUN0cUQoWAUAAAB0b3JjaHFFaDpYBAAAAGN1ZGFxRlgMAAAAaXNfYXZhaWxhYmxlcUdYBQAAAHByaW50cUhYCgAAAGdldF9jbGllbnRxSVgKAAAAZnJvbV9udW1weXFKWA8AAAByZWFkX2Zyb21fc3RvcmVxS1gLAAAAYnVja2V0X25hbWVxTFgFAAAAZmxvYXRxTVgDAAAAZ2V0cU5YAwAAAGludHFPWAIAAABubnFQWAQAAABSZUxVcVFYBwAAAFNpZ21vaWRxUlgDAAAATmV0cVNYBwAAAEJDRUxvc3NxVFgFAAAAb3B0aW1xVVgEAAAAQWRhbXFWWAoAAABwYXJhbWV0ZXJzcVdYBQAAAHRyYWlucVhoL1gFAAAAcmFuZ2VxWWgwWAkAAAB6ZXJvX2dyYWRxWlgIAAAAYmFja3dhcmRxW1gEAAAAc3RlcHFcWA4AAAB3cml0ZV90b19zdG9yZXFdWAQAAABpdGVtcV50cV8oWA4AAABoeXBlcnBhcmFtX2lkeHFgWBAAAAByZXRjb2RlX2dlbnBvaW50cWFYBgAAAGNsaWVudHFiaBVoFmgXaBhoQWgaaBtoHGgdaB5oMlgJAAAAb3B0aW1pemVycWNYBQAAAGVwb2NocWRYEQAAAGZlYXR1cmVzX3NodWZmbGVkcWVYDwAAAHRhcmdldF9zaHVmZmxlZHFmaDNoNFgKAAAAdHJhaW5fbG9zc3FnaDdoQHRxaGg2WAsAAAB0cmFpbl9tb2RlbHFpS6dDWgAFGAEOAgYDFgEWARYBFgMSARABEAEQARABDAMIAQoBCgEIAxgCCAEUAQgCCAEIAgoBCgEKAQoCDgEEAQQCCAESAg4BFAIIAQgBDgIIARIBDgIOEAwBDgIeAnFqKWg5aDqGcWt0cWxScW1K/////31xbodxb1JxcH1xcShYBwAAAGdsb2JhbHNxcn1xcyhoS2gAKGgLaA8oSwNLAEsESwRLQ0M6dAB8AHwCgwJzGnQBZAF8AJsAZAKdA4MBggF8AmoCfAB8AWQDjQJkBBkAagNqBH0DdAVqBnwDgwFTAHF0KE5YBwAAAEJ1Y2tldCBxdVgPAAAAIGRvZXMgbm90IGV4aXN0cXZYBgAAAEJ1Y2tldHF3WAMAAABLZXlxeIZxeVgEAAAAQm9keXF6dHF7KFgT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''))\n\ndef
          _serialize_int(int_value: int) -> str:\n    if isinstance(int_value, str):\n        return
          int_value\n    if not isinstance(int_value, int):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of int.''.format(str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Train
          model'', description=''Look up hyperparams from store'')\n_parser.add_argument(\"--hyperparam-idx\",
          dest=\"hyperparam_idx\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--retcode-genpoint\",
          dest=\"retcode_genpoint\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_model(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "docker.io/pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime"}}, "inputs":
          [{"name": "hyperparam_idx", "type": "Integer"}, {"name": "retcode_genpoint",
          "type": "Integer"}], "name": "Train model", "outputs": [{"name": "Output",
          "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"hyperparam_idx":
          "8", "retcode_genpoint": "{{inputs.parameters.generate-random-search-point-9-Output}}"}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
